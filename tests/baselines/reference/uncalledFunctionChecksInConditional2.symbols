=== tests/cases/compiler/uncalledFunctionChecksInConditional2.ts ===
{
  const perf = window.performance
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 1, 7))
>window.performance : Symbol(performance, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
>window : Symbol(window, Decl(lib.dom.d.ts, --, --))
>performance : Symbol(performance, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))

  // Simplified
  if (
    perf &&
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 1, 7))

    perf.measure &&
>perf.measure : Symbol(Performance.measure, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 1, 7))
>measure : Symbol(Performance.measure, Decl(lib.dom.d.ts, --, --))

    perf.clearMarks &&
>perf.clearMarks : Symbol(Performance.clearMarks, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 1, 7))
>clearMarks : Symbol(Performance.clearMarks, Decl(lib.dom.d.ts, --, --))

    perf.clearMeasures
>perf.clearMeasures : Symbol(Performance.clearMeasures, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 1, 7))
>clearMeasures : Symbol(Performance.clearMeasures, Decl(lib.dom.d.ts, --, --))

  ) {
    perf.measure("");
>perf.measure : Symbol(Performance.measure, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 1, 7))
>measure : Symbol(Performance.measure, Decl(lib.dom.d.ts, --, --))

    perf.clearMarks("")
>perf.clearMarks : Symbol(Performance.clearMarks, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 1, 7))
>clearMarks : Symbol(Performance.clearMarks, Decl(lib.dom.d.ts, --, --))

    perf.clearMeasures("")
>perf.clearMeasures : Symbol(Performance.clearMeasures, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 1, 7))
>clearMeasures : Symbol(Performance.clearMeasures, Decl(lib.dom.d.ts, --, --))
  }

  // With ||
  if (
    perf &&
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 1, 7))

    perf.mark &&
>perf.mark : Symbol(Performance.mark, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 1, 7))
>mark : Symbol(Performance.mark, Decl(lib.dom.d.ts, --, --))

    perf.measure || !!true
>perf.measure : Symbol(Performance.measure, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 1, 7))
>measure : Symbol(Performance.measure, Decl(lib.dom.d.ts, --, --))

  ) {
    perf.mark("");
>perf.mark : Symbol(Performance.mark, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 1, 7))
>mark : Symbol(Performance.mark, Decl(lib.dom.d.ts, --, --))
  }
};

// Original #49192
declare let inBrowser: boolean;
>inBrowser : Symbol(inBrowser, Decl(uncalledFunctionChecksInConditional2.ts, 26, 11))
{
  let mark;
>mark : Symbol(mark, Decl(uncalledFunctionChecksInConditional2.ts, 28, 5))

  let measure;
>measure : Symbol(measure, Decl(uncalledFunctionChecksInConditional2.ts, 29, 5))

  const perf = inBrowser && window.performance
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 30, 7))
>inBrowser : Symbol(inBrowser, Decl(uncalledFunctionChecksInConditional2.ts, 26, 11))
>window.performance : Symbol(performance, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))
>window : Symbol(window, Decl(lib.dom.d.ts, --, --))
>performance : Symbol(performance, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))

  /* istanbul ignore if */
  if (
    perf &&
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 30, 7))

    perf.mark &&
>perf.mark : Symbol(Performance.mark, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 30, 7))
>mark : Symbol(Performance.mark, Decl(lib.dom.d.ts, --, --))

    perf.measure &&
>perf.measure : Symbol(Performance.measure, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 30, 7))
>measure : Symbol(Performance.measure, Decl(lib.dom.d.ts, --, --))

    perf.clearMarks &&
>perf.clearMarks : Symbol(Performance.clearMarks, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 30, 7))
>clearMarks : Symbol(Performance.clearMarks, Decl(lib.dom.d.ts, --, --))

    perf.clearMeasures
>perf.clearMeasures : Symbol(Performance.clearMeasures, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 30, 7))
>clearMeasures : Symbol(Performance.clearMeasures, Decl(lib.dom.d.ts, --, --))

  ) {
    mark = (tag) => perf.mark(tag)
>mark : Symbol(mark, Decl(uncalledFunctionChecksInConditional2.ts, 28, 5))
>tag : Symbol(tag, Decl(uncalledFunctionChecksInConditional2.ts, 39, 12))
>perf.mark : Symbol(Performance.mark, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 30, 7))
>mark : Symbol(Performance.mark, Decl(lib.dom.d.ts, --, --))
>tag : Symbol(tag, Decl(uncalledFunctionChecksInConditional2.ts, 39, 12))

    measure = (name, startTag, endTag) => {
>measure : Symbol(measure, Decl(uncalledFunctionChecksInConditional2.ts, 29, 5))
>name : Symbol(name, Decl(uncalledFunctionChecksInConditional2.ts, 40, 15))
>startTag : Symbol(startTag, Decl(uncalledFunctionChecksInConditional2.ts, 40, 20))
>endTag : Symbol(endTag, Decl(uncalledFunctionChecksInConditional2.ts, 40, 30))

      perf.measure(name, startTag, endTag)
>perf.measure : Symbol(Performance.measure, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 30, 7))
>measure : Symbol(Performance.measure, Decl(lib.dom.d.ts, --, --))
>name : Symbol(name, Decl(uncalledFunctionChecksInConditional2.ts, 40, 15))
>startTag : Symbol(startTag, Decl(uncalledFunctionChecksInConditional2.ts, 40, 20))
>endTag : Symbol(endTag, Decl(uncalledFunctionChecksInConditional2.ts, 40, 30))

      perf.clearMarks(startTag)
>perf.clearMarks : Symbol(Performance.clearMarks, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 30, 7))
>clearMarks : Symbol(Performance.clearMarks, Decl(lib.dom.d.ts, --, --))
>startTag : Symbol(startTag, Decl(uncalledFunctionChecksInConditional2.ts, 40, 20))

      perf.clearMarks(endTag)
>perf.clearMarks : Symbol(Performance.clearMarks, Decl(lib.dom.d.ts, --, --))
>perf : Symbol(perf, Decl(uncalledFunctionChecksInConditional2.ts, 30, 7))
>clearMarks : Symbol(Performance.clearMarks, Decl(lib.dom.d.ts, --, --))
>endTag : Symbol(endTag, Decl(uncalledFunctionChecksInConditional2.ts, 40, 30))

      // perf.clearMeasures(name)
    }
  }
};

