=== tests/cases/compiler/partialDiscriminatedUnionMemberHasGoodError.ts ===
interface TypeA {
>TypeA : Symbol(TypeA, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 0, 0))

    type: "A";
>type : Symbol(TypeA.type, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 0, 17))

    param: string;
>param : Symbol(TypeA.param, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 1, 14))
}

interface TypeB {
>TypeB : Symbol(TypeB, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 3, 1))

    type: "B";
>type : Symbol(TypeB.type, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 5, 17))

    param: string;
>param : Symbol(TypeB.param, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 6, 14))
}

type ValidType = TypeA | TypeB;
>ValidType : Symbol(ValidType, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 8, 1))
>TypeA : Symbol(TypeA, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 0, 0))
>TypeB : Symbol(TypeB, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 3, 1))

interface Wrapper {
>Wrapper : Symbol(Wrapper, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 10, 31))

    types: ValidType[];
>types : Symbol(Wrapper.types, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 12, 19))
>ValidType : Symbol(ValidType, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 8, 1))
}

const foo: Wrapper[] = [];
>foo : Symbol(foo, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 16, 5))
>Wrapper : Symbol(Wrapper, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 10, 31))

foo.push({
>foo.push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))
>foo : Symbol(foo, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 16, 5))
>push : Symbol(Array.push, Decl(lib.es5.d.ts, --, --))

    types: [{
>types : Symbol(types, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 18, 10))

        type: "A"
>type : Symbol(type, Decl(partialDiscriminatedUnionMemberHasGoodError.ts, 19, 13))

    }]
});
