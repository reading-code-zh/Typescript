=== tests/cases/compiler/narrowingTypeofFunction.ts ===
type Meta = { foo: string }
>Meta : Symbol(Meta, Decl(narrowingTypeofFunction.ts, 0, 0))
>foo : Symbol(foo, Decl(narrowingTypeofFunction.ts, 0, 13))

interface F { (): string }
>F : Symbol(F, Decl(narrowingTypeofFunction.ts, 0, 27))

function f1(a: (F & Meta) | string) {
>f1 : Symbol(f1, Decl(narrowingTypeofFunction.ts, 1, 26))
>a : Symbol(a, Decl(narrowingTypeofFunction.ts, 3, 12))
>F : Symbol(F, Decl(narrowingTypeofFunction.ts, 0, 27))
>Meta : Symbol(Meta, Decl(narrowingTypeofFunction.ts, 0, 0))

    if (typeof a === "function") {
>a : Symbol(a, Decl(narrowingTypeofFunction.ts, 3, 12))

        a;
>a : Symbol(a, Decl(narrowingTypeofFunction.ts, 3, 12))
    }
    else {
        a;
>a : Symbol(a, Decl(narrowingTypeofFunction.ts, 3, 12))
    }
}

function f2<T>(x: (T & F) | T & string) {
>f2 : Symbol(f2, Decl(narrowingTypeofFunction.ts, 10, 1))
>T : Symbol(T, Decl(narrowingTypeofFunction.ts, 12, 12))
>x : Symbol(x, Decl(narrowingTypeofFunction.ts, 12, 15))
>T : Symbol(T, Decl(narrowingTypeofFunction.ts, 12, 12))
>F : Symbol(F, Decl(narrowingTypeofFunction.ts, 0, 27))
>T : Symbol(T, Decl(narrowingTypeofFunction.ts, 12, 12))

    if (typeof x === "function") {
>x : Symbol(x, Decl(narrowingTypeofFunction.ts, 12, 15))

        x;
>x : Symbol(x, Decl(narrowingTypeofFunction.ts, 12, 15))
    }
    else {
        x;
>x : Symbol(x, Decl(narrowingTypeofFunction.ts, 12, 15))
    }
}

function f3(x: { _foo: number } & number) {
>f3 : Symbol(f3, Decl(narrowingTypeofFunction.ts, 19, 1))
>x : Symbol(x, Decl(narrowingTypeofFunction.ts, 21, 12))
>_foo : Symbol(_foo, Decl(narrowingTypeofFunction.ts, 21, 16))

    if (typeof x === "function") {
>x : Symbol(x, Decl(narrowingTypeofFunction.ts, 21, 12))

        x;
>x : Symbol(x, Decl(narrowingTypeofFunction.ts, 21, 12))
    }
}
