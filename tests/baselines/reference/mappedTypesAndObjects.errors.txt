tests/cases/conformance/types/mapped/mappedTypesAndObjects.ts(25,11): error TS2430: Interface 'E1<T>' incorrectly extends interface 'Base'.
  Types of property 'foo' are incompatible.
    Type 'T' is not assignable to type '{ [key: string]: any; }'.


==== tests/cases/conformance/types/mapped/mappedTypesAndObjects.ts (1 errors) ====
    function f1<T>(x: Partial<T>, y: Readonly<T>) {
        let obj: {};
        obj = x;
        obj = y;
    }
    
    function f2<T>(x: Partial<T>, y: Readonly<T>) {
        let obj: { [x: string]: any };
        obj = x;
        obj = y;
    }
    
    function f3<T>(x: Partial<T>) {
        x = {};
    }
    
    // Repro from #12900
    
    interface Base {
        foo: { [key: string]: any };
        bar: any;
        baz: any;
    }
    
    interface E1<T> extends Base {
              ~~
!!! error TS2430: Interface 'E1<T>' incorrectly extends interface 'Base'.
!!! error TS2430:   Types of property 'foo' are incompatible.
!!! error TS2430:     Type 'T' is not assignable to type '{ [key: string]: any; }'.
!!! related TS2208 tests/cases/conformance/types/mapped/mappedTypesAndObjects.ts:25:14: This type parameter might need an `extends { [key: string]: any; }` constraint.
        foo: T;
    }
    
    interface Something { name: string, value: string };
    interface E2 extends Base {
        foo: Partial<Something>;  // or other mapped type
    }
    
    interface E3<T> extends Base {
        foo: Partial<T>; // or other mapped type
    }
    
    // Repro from #13747
    
    class Form<T> {
        private values: {[P in keyof T]?: T[P]} = {}
    }
    