=== tests/cases/conformance/classes/members/privateNames/privateNameMethodCallExpression.ts ===
class AA {
>AA : Symbol(AA, Decl(privateNameMethodCallExpression.ts, 0, 0))

    #method() { this.x = 10; };
>#method : Symbol(AA.#method, Decl(privateNameMethodCallExpression.ts, 0, 10))
>this.x : Symbol(AA.x, Decl(privateNameMethodCallExpression.ts, 2, 25))
>this : Symbol(AA, Decl(privateNameMethodCallExpression.ts, 0, 0))
>x : Symbol(AA.x, Decl(privateNameMethodCallExpression.ts, 2, 25))

    #method2(a, ...b) {};
>#method2 : Symbol(AA.#method2, Decl(privateNameMethodCallExpression.ts, 1, 31))
>a : Symbol(a, Decl(privateNameMethodCallExpression.ts, 2, 13))
>b : Symbol(b, Decl(privateNameMethodCallExpression.ts, 2, 15))

    x = 1;
>x : Symbol(AA.x, Decl(privateNameMethodCallExpression.ts, 2, 25))

    test() {
>test : Symbol(AA.test, Decl(privateNameMethodCallExpression.ts, 3, 10))

        this.#method();
>this.#method : Symbol(AA.#method, Decl(privateNameMethodCallExpression.ts, 0, 10))
>this : Symbol(AA, Decl(privateNameMethodCallExpression.ts, 0, 0))

        const func = this.#method;
>func : Symbol(func, Decl(privateNameMethodCallExpression.ts, 6, 13))
>this.#method : Symbol(AA.#method, Decl(privateNameMethodCallExpression.ts, 0, 10))
>this : Symbol(AA, Decl(privateNameMethodCallExpression.ts, 0, 0))

        func();
>func : Symbol(func, Decl(privateNameMethodCallExpression.ts, 6, 13))

        new this.#method();
>this.#method : Symbol(AA.#method, Decl(privateNameMethodCallExpression.ts, 0, 10))
>this : Symbol(AA, Decl(privateNameMethodCallExpression.ts, 0, 0))

        const arr = [ 1, 2 ];
>arr : Symbol(arr, Decl(privateNameMethodCallExpression.ts, 10, 13))

        this.#method2(0, ...arr, 3);
>this.#method2 : Symbol(AA.#method2, Decl(privateNameMethodCallExpression.ts, 1, 31))
>this : Symbol(AA, Decl(privateNameMethodCallExpression.ts, 0, 0))
>arr : Symbol(arr, Decl(privateNameMethodCallExpression.ts, 10, 13))

        const b = new this.#method2(0, ...arr, 3); //Error 
>b : Symbol(b, Decl(privateNameMethodCallExpression.ts, 13, 13))
>this.#method2 : Symbol(AA.#method2, Decl(privateNameMethodCallExpression.ts, 1, 31))
>this : Symbol(AA, Decl(privateNameMethodCallExpression.ts, 0, 0))
>arr : Symbol(arr, Decl(privateNameMethodCallExpression.ts, 10, 13))

        const str = this.#method2`head${1}middle${2}tail`;
>str : Symbol(str, Decl(privateNameMethodCallExpression.ts, 14, 13))
>this.#method2 : Symbol(AA.#method2, Decl(privateNameMethodCallExpression.ts, 1, 31))
>this : Symbol(AA, Decl(privateNameMethodCallExpression.ts, 0, 0))

        this.getInstance().#method2`test${1}and${2}`;
>this.getInstance().#method2 : Symbol(AA.#method2, Decl(privateNameMethodCallExpression.ts, 1, 31))
>this.getInstance : Symbol(AA.getInstance, Decl(privateNameMethodCallExpression.ts, 20, 5))
>this : Symbol(AA, Decl(privateNameMethodCallExpression.ts, 0, 0))
>getInstance : Symbol(AA.getInstance, Decl(privateNameMethodCallExpression.ts, 20, 5))

        this.getInstance().#method2(0, ...arr, 3); 
>this.getInstance().#method2 : Symbol(AA.#method2, Decl(privateNameMethodCallExpression.ts, 1, 31))
>this.getInstance : Symbol(AA.getInstance, Decl(privateNameMethodCallExpression.ts, 20, 5))
>this : Symbol(AA, Decl(privateNameMethodCallExpression.ts, 0, 0))
>getInstance : Symbol(AA.getInstance, Decl(privateNameMethodCallExpression.ts, 20, 5))
>arr : Symbol(arr, Decl(privateNameMethodCallExpression.ts, 10, 13))

        const b2 = new (this.getInstance().#method2)(0, ...arr, 3); //Error 
>b2 : Symbol(b2, Decl(privateNameMethodCallExpression.ts, 18, 13))
>this.getInstance().#method2 : Symbol(AA.#method2, Decl(privateNameMethodCallExpression.ts, 1, 31))
>this.getInstance : Symbol(AA.getInstance, Decl(privateNameMethodCallExpression.ts, 20, 5))
>this : Symbol(AA, Decl(privateNameMethodCallExpression.ts, 0, 0))
>getInstance : Symbol(AA.getInstance, Decl(privateNameMethodCallExpression.ts, 20, 5))
>arr : Symbol(arr, Decl(privateNameMethodCallExpression.ts, 10, 13))

        const str2 = this.getInstance().#method2`head${1}middle${2}tail`;
>str2 : Symbol(str2, Decl(privateNameMethodCallExpression.ts, 19, 13))
>this.getInstance().#method2 : Symbol(AA.#method2, Decl(privateNameMethodCallExpression.ts, 1, 31))
>this.getInstance : Symbol(AA.getInstance, Decl(privateNameMethodCallExpression.ts, 20, 5))
>this : Symbol(AA, Decl(privateNameMethodCallExpression.ts, 0, 0))
>getInstance : Symbol(AA.getInstance, Decl(privateNameMethodCallExpression.ts, 20, 5))
    }
    getInstance() { return new AA(); }
>getInstance : Symbol(AA.getInstance, Decl(privateNameMethodCallExpression.ts, 20, 5))
>AA : Symbol(AA, Decl(privateNameMethodCallExpression.ts, 0, 0))
}

