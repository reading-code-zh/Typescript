=== tests/cases/conformance/es2020/modules/0.ts ===
export const a = 1;
>a : Symbol(a, Decl(0.ts, 0, 12))

export const b = 2;
>b : Symbol(b, Decl(0.ts, 1, 12))

=== tests/cases/conformance/es2020/modules/1.ts ===
export * as ns from './0';
>ns : Symbol(ns, Decl(1.ts, 0, 6))

ns.a;
>ns.a : Symbol(a, Decl(1.ts, 3, 10))
>ns : Symbol(ns, Decl(1.ts, 3, 3))
>a : Symbol(a, Decl(1.ts, 3, 10))

ns.b;
>ns.b : Symbol(b, Decl(1.ts, 3, 15))
>ns : Symbol(ns, Decl(1.ts, 3, 3))
>b : Symbol(b, Decl(1.ts, 3, 15))

let ns = {a: 1, b: 2}
>ns : Symbol(ns, Decl(1.ts, 3, 3))
>a : Symbol(a, Decl(1.ts, 3, 10))
>b : Symbol(b, Decl(1.ts, 3, 15))

ns.a;
>ns.a : Symbol(a, Decl(1.ts, 3, 10))
>ns : Symbol(ns, Decl(1.ts, 3, 3))
>a : Symbol(a, Decl(1.ts, 3, 10))

ns.b;
>ns.b : Symbol(b, Decl(1.ts, 3, 15))
>ns : Symbol(ns, Decl(1.ts, 3, 3))
>b : Symbol(b, Decl(1.ts, 3, 15))

=== tests/cases/conformance/es2020/modules/2.ts ===
import * as foo from './1'
>foo : Symbol(foo, Decl(2.ts, 0, 6))

foo.ns.a;
>foo.ns.a : Symbol(foo.ns.a, Decl(0.ts, 0, 12))
>foo.ns : Symbol(foo.ns, Decl(1.ts, 0, 6))
>foo : Symbol(foo, Decl(2.ts, 0, 6))
>ns : Symbol(foo.ns, Decl(1.ts, 0, 6))
>a : Symbol(foo.ns.a, Decl(0.ts, 0, 12))

foo.ns.b;
>foo.ns.b : Symbol(foo.ns.b, Decl(0.ts, 1, 12))
>foo.ns : Symbol(foo.ns, Decl(1.ts, 0, 6))
>foo : Symbol(foo, Decl(2.ts, 0, 6))
>ns : Symbol(foo.ns, Decl(1.ts, 0, 6))
>b : Symbol(foo.ns.b, Decl(0.ts, 1, 12))

