=== tests/cases/compiler/omitTypeTestErrors01.ts ===
interface Foo {
>Foo : Symbol(Foo, Decl(omitTypeTestErrors01.ts, 0, 0))

    a: string;
>a : Symbol(Foo.a, Decl(omitTypeTestErrors01.ts, 0, 15))

    b: number;
>b : Symbol(Foo.b, Decl(omitTypeTestErrors01.ts, 1, 14))

    c: boolean;
>c : Symbol(Foo.c, Decl(omitTypeTestErrors01.ts, 2, 14))
}

export type Bar = Omit<Foo, "c">;
>Bar : Symbol(Bar, Decl(omitTypeTestErrors01.ts, 4, 1))
>Omit : Symbol(Omit, Decl(lib.es5.d.ts, --, --))
>Foo : Symbol(Foo, Decl(omitTypeTestErrors01.ts, 0, 0))

export type Baz = Omit<Foo, "b" | "c">;
>Baz : Symbol(Baz, Decl(omitTypeTestErrors01.ts, 6, 33))
>Omit : Symbol(Omit, Decl(lib.es5.d.ts, --, --))
>Foo : Symbol(Foo, Decl(omitTypeTestErrors01.ts, 0, 0))

export function getBarC(bar: Bar) {
>getBarC : Symbol(getBarC, Decl(omitTypeTestErrors01.ts, 7, 39))
>bar : Symbol(bar, Decl(omitTypeTestErrors01.ts, 9, 24))
>Bar : Symbol(Bar, Decl(omitTypeTestErrors01.ts, 4, 1))

    return bar.c;
>bar : Symbol(bar, Decl(omitTypeTestErrors01.ts, 9, 24))
}

export function getBazB(baz: Baz) {
>getBazB : Symbol(getBazB, Decl(omitTypeTestErrors01.ts, 11, 1))
>baz : Symbol(baz, Decl(omitTypeTestErrors01.ts, 13, 24))
>Baz : Symbol(Baz, Decl(omitTypeTestErrors01.ts, 6, 33))

    return baz.b;
>baz : Symbol(baz, Decl(omitTypeTestErrors01.ts, 13, 24))
}


