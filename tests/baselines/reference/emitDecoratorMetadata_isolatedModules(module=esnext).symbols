=== tests/cases/compiler/type1.ts ===
interface T1 {}
>T1 : Symbol(T1, Decl(type1.ts, 0, 0))

export type { T1 }
>T1 : Symbol(T1, Decl(type1.ts, 1, 13))

=== tests/cases/compiler/type2.ts ===
export interface T2 {}
>T2 : Symbol(T2, Decl(type2.ts, 0, 0))

=== tests/cases/compiler/class3.ts ===
export class C3 {}
>C3 : Symbol(C3, Decl(class3.ts, 0, 0))

=== tests/cases/compiler/index.ts ===
import { T1 } from "./type1";
>T1 : Symbol(T1, Decl(index.ts, 0, 8))

import * as t1 from "./type1";
>t1 : Symbol(t1, Decl(index.ts, 1, 6))

import type { T2 } from "./type2";
>T2 : Symbol(T2, Decl(index.ts, 2, 13))

import { C3 } from "./class3";
>C3 : Symbol(C3, Decl(index.ts, 3, 8))

declare var EventListener: any;
>EventListener : Symbol(EventListener, Decl(index.ts, 4, 11))

class HelloWorld {
>HelloWorld : Symbol(HelloWorld, Decl(index.ts, 4, 31))

  @EventListener('1')
>EventListener : Symbol(EventListener, Decl(index.ts, 4, 11))

  handleEvent1(event: T1) {} // Error
>handleEvent1 : Symbol(HelloWorld.handleEvent1, Decl(index.ts, 6, 18))
>event : Symbol(event, Decl(index.ts, 8, 15))
>T1 : Symbol(T1, Decl(index.ts, 0, 8))
  
  @EventListener('2')
>EventListener : Symbol(EventListener, Decl(index.ts, 4, 11))

  handleEvent2(event: T2) {} // Ok
>handleEvent2 : Symbol(HelloWorld.handleEvent2, Decl(index.ts, 8, 28))
>event : Symbol(event, Decl(index.ts, 11, 15))
>T2 : Symbol(T2, Decl(index.ts, 2, 13))

  @EventListener('1')
>EventListener : Symbol(EventListener, Decl(index.ts, 4, 11))

  p1!: T1; // Error
>p1 : Symbol(HelloWorld.p1, Decl(index.ts, 11, 28))
>T1 : Symbol(T1, Decl(index.ts, 0, 8))

  @EventListener('1')
>EventListener : Symbol(EventListener, Decl(index.ts, 4, 11))

  p1_ns!: t1.T1; // Ok
>p1_ns : Symbol(HelloWorld.p1_ns, Decl(index.ts, 14, 10))
>t1 : Symbol(t1, Decl(index.ts, 1, 6))
>T1 : Symbol(t1.T1, Decl(type1.ts, 1, 13))

  @EventListener('2')
>EventListener : Symbol(EventListener, Decl(index.ts, 4, 11))

  p2!: T2; // Ok
>p2 : Symbol(HelloWorld.p2, Decl(index.ts, 17, 16))
>T2 : Symbol(T2, Decl(index.ts, 2, 13))

  @EventListener('3')
>EventListener : Symbol(EventListener, Decl(index.ts, 4, 11))

  handleEvent3(event: C3): T1 { return undefined! } // Ok, Error
>handleEvent3 : Symbol(HelloWorld.handleEvent3, Decl(index.ts, 20, 10))
>event : Symbol(event, Decl(index.ts, 23, 15))
>C3 : Symbol(C3, Decl(index.ts, 3, 8))
>T1 : Symbol(T1, Decl(index.ts, 0, 8))
>undefined : Symbol(undefined)
}

