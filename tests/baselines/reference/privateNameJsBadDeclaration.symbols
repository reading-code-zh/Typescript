=== tests/cases/conformance/classes/members/privateNames/privateNameJsPrototype.js ===
function A() { }
>A : Symbol(A, Decl(privateNameJsPrototype.js, 0, 0), Decl(privateNameJsPrototype.js, 0, 16))

A.prototype = {
>A.prototype : Symbol(A.prototype, Decl(privateNameJsPrototype.js, 0, 16))
>A : Symbol(A, Decl(privateNameJsPrototype.js, 0, 0), Decl(privateNameJsPrototype.js, 0, 16))
>prototype : Symbol(A.prototype, Decl(privateNameJsPrototype.js, 0, 16))

  #x: 1,         // Error
>#x : Symbol(#x, Decl(privateNameJsPrototype.js, 1, 15))

  #m() {},       // Error
>#m : Symbol(#m, Decl(privateNameJsPrototype.js, 2, 8))

  get #p() { return "" } // Error
>#p : Symbol(#p, Decl(privateNameJsPrototype.js, 3, 10))
}
class B { }
>B : Symbol(B, Decl(privateNameJsPrototype.js, 5, 1), Decl(privateNameJsPrototype.js, 6, 11))

B.prototype = {
>B.prototype : Symbol(B.prototype, Decl(privateNameJsPrototype.js, 6, 11))
>B : Symbol(B, Decl(privateNameJsPrototype.js, 5, 1), Decl(privateNameJsPrototype.js, 6, 11))
>prototype : Symbol(B.prototype, Decl(privateNameJsPrototype.js, 6, 11))

  #y: 2,         // Error
>#y : Symbol(#y, Decl(privateNameJsPrototype.js, 7, 15))

  #m() {},       // Error
>#m : Symbol(#m, Decl(privateNameJsPrototype.js, 8, 8))

  get #p() { return "" } // Error
>#p : Symbol(#p, Decl(privateNameJsPrototype.js, 9, 10))
}
class C {
>C : Symbol(C, Decl(privateNameJsPrototype.js, 11, 1))

  constructor() {
    this.#z = 3;
>this : Symbol(C, Decl(privateNameJsPrototype.js, 11, 1))
  }
}
