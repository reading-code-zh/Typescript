=== tests/cases/compiler/inlineConditionalHasSimilarAssignability.ts ===
type MyExtract<T, U> = T extends U ? T : never
>MyExtract : Symbol(MyExtract, Decl(inlineConditionalHasSimilarAssignability.ts, 0, 0))
>T : Symbol(T, Decl(inlineConditionalHasSimilarAssignability.ts, 0, 15))
>U : Symbol(U, Decl(inlineConditionalHasSimilarAssignability.ts, 0, 17))
>T : Symbol(T, Decl(inlineConditionalHasSimilarAssignability.ts, 0, 15))
>U : Symbol(U, Decl(inlineConditionalHasSimilarAssignability.ts, 0, 17))
>T : Symbol(T, Decl(inlineConditionalHasSimilarAssignability.ts, 0, 15))

function foo<T>(a: T) {
>foo : Symbol(foo, Decl(inlineConditionalHasSimilarAssignability.ts, 0, 46))
>T : Symbol(T, Decl(inlineConditionalHasSimilarAssignability.ts, 2, 13))
>a : Symbol(a, Decl(inlineConditionalHasSimilarAssignability.ts, 2, 16))
>T : Symbol(T, Decl(inlineConditionalHasSimilarAssignability.ts, 2, 13))

  const b: Extract<any[], T> = 0 as any;
>b : Symbol(b, Decl(inlineConditionalHasSimilarAssignability.ts, 3, 7))
>Extract : Symbol(Extract, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(inlineConditionalHasSimilarAssignability.ts, 2, 13))

  a = b; // ok
>a : Symbol(a, Decl(inlineConditionalHasSimilarAssignability.ts, 2, 16))
>b : Symbol(b, Decl(inlineConditionalHasSimilarAssignability.ts, 3, 7))

  const c: (any[] extends T ? any[] : never) = 0 as any;
>c : Symbol(c, Decl(inlineConditionalHasSimilarAssignability.ts, 6, 7))
>T : Symbol(T, Decl(inlineConditionalHasSimilarAssignability.ts, 2, 13))

  a = c;
>a : Symbol(a, Decl(inlineConditionalHasSimilarAssignability.ts, 2, 16))
>c : Symbol(c, Decl(inlineConditionalHasSimilarAssignability.ts, 6, 7))

  const d: MyExtract<any[], T> = 0 as any;
>d : Symbol(d, Decl(inlineConditionalHasSimilarAssignability.ts, 9, 7))
>MyExtract : Symbol(MyExtract, Decl(inlineConditionalHasSimilarAssignability.ts, 0, 0))
>T : Symbol(T, Decl(inlineConditionalHasSimilarAssignability.ts, 2, 13))

  a = d; // ok
>a : Symbol(a, Decl(inlineConditionalHasSimilarAssignability.ts, 2, 16))
>d : Symbol(d, Decl(inlineConditionalHasSimilarAssignability.ts, 9, 7))

  type CustomType = any[] extends T ? any[] : never;
>CustomType : Symbol(CustomType, Decl(inlineConditionalHasSimilarAssignability.ts, 10, 8))
>T : Symbol(T, Decl(inlineConditionalHasSimilarAssignability.ts, 2, 13))

  const e: CustomType = 0 as any;
>e : Symbol(e, Decl(inlineConditionalHasSimilarAssignability.ts, 13, 7))
>CustomType : Symbol(CustomType, Decl(inlineConditionalHasSimilarAssignability.ts, 10, 8))

  a = e;
>a : Symbol(a, Decl(inlineConditionalHasSimilarAssignability.ts, 2, 16))
>e : Symbol(e, Decl(inlineConditionalHasSimilarAssignability.ts, 13, 7))
}
