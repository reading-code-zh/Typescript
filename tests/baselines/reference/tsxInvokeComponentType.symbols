=== tests/cases/compiler/tsxInvokeComponentType.tsx ===
/// <reference path="react16.d.ts" />
import React, { ComponentType } from "react";
>React : Symbol(React, Decl(tsxInvokeComponentType.tsx, 1, 6))
>ComponentType : Symbol(ComponentType, Decl(tsxInvokeComponentType.tsx, 1, 15))

declare const Elem: ComponentType<{ someKey: string }>;
>Elem : Symbol(Elem, Decl(tsxInvokeComponentType.tsx, 3, 13))
>ComponentType : Symbol(ComponentType, Decl(tsxInvokeComponentType.tsx, 1, 15))
>someKey : Symbol(someKey, Decl(tsxInvokeComponentType.tsx, 3, 35))

const bad = <Elem />;
>bad : Symbol(bad, Decl(tsxInvokeComponentType.tsx, 5, 5))
>Elem : Symbol(Elem, Decl(tsxInvokeComponentType.tsx, 3, 13))

const good = <Elem someKey="ok" />;
>good : Symbol(good, Decl(tsxInvokeComponentType.tsx, 7, 5))
>Elem : Symbol(Elem, Decl(tsxInvokeComponentType.tsx, 3, 13))
>someKey : Symbol(someKey, Decl(tsxInvokeComponentType.tsx, 7, 18))

declare const Elem2: ComponentType<{ opt?: number }>;
>Elem2 : Symbol(Elem2, Decl(tsxInvokeComponentType.tsx, 9, 13))
>ComponentType : Symbol(ComponentType, Decl(tsxInvokeComponentType.tsx, 1, 15))
>opt : Symbol(opt, Decl(tsxInvokeComponentType.tsx, 9, 36))

const alsoOk = <Elem2>text</Elem2>;
>alsoOk : Symbol(alsoOk, Decl(tsxInvokeComponentType.tsx, 10, 5))
>Elem2 : Symbol(Elem2, Decl(tsxInvokeComponentType.tsx, 9, 13))
>Elem2 : Symbol(Elem2, Decl(tsxInvokeComponentType.tsx, 9, 13))

