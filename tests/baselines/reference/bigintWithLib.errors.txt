tests/cases/compiler/bigintWithLib.ts(4,1): error TS2350: Only a void function can be called with the 'new' keyword.
tests/cases/compiler/bigintWithLib.ts(19,33): error TS2769: No overload matches this call.
  Overload 1 of 3, '(length?: number): BigInt64Array', gave the following error.
    Argument of type 'number[]' is not assignable to parameter of type 'number'.
  Overload 2 of 3, '(array: Iterable<bigint>): BigInt64Array', gave the following error.
    Argument of type 'number[]' is not assignable to parameter of type 'Iterable<bigint>'.
      The types returned by '[Symbol.iterator]().next(...)' are incompatible between these types.
        Type 'IteratorResult<number, any>' is not assignable to type 'IteratorResult<bigint, any>'.
          Type 'IteratorYieldResult<number>' is not assignable to type 'IteratorResult<bigint, any>'.
            Type 'IteratorYieldResult<number>' is not assignable to type 'IteratorYieldResult<bigint>'.
              Type 'number' is not assignable to type 'bigint'.
  Overload 3 of 3, '(buffer: ArrayBufferLike, byteOffset?: number, length?: number): BigInt64Array', gave the following error.
    Argument of type 'number[]' is not assignable to parameter of type 'ArrayBufferLike'.
      Type 'number[]' is missing the following properties from type 'SharedArrayBuffer': byteLength, [Symbol.species], [Symbol.toStringTag]
tests/cases/compiler/bigintWithLib.ts(24,13): error TS2540: Cannot assign to 'length' because it is a read-only property.
tests/cases/compiler/bigintWithLib.ts(31,35): error TS2769: No overload matches this call.
  Overload 1 of 3, '(length?: number): BigUint64Array', gave the following error.
    Argument of type 'number[]' is not assignable to parameter of type 'number'.
  Overload 2 of 3, '(array: Iterable<bigint>): BigUint64Array', gave the following error.
    Argument of type 'number[]' is not assignable to parameter of type 'Iterable<bigint>'.
  Overload 3 of 3, '(buffer: ArrayBufferLike, byteOffset?: number, length?: number): BigUint64Array', gave the following error.
    Argument of type 'number[]' is not assignable to parameter of type 'ArrayBufferLike'.
tests/cases/compiler/bigintWithLib.ts(36,13): error TS2540: Cannot assign to 'length' because it is a read-only property.
tests/cases/compiler/bigintWithLib.ts(43,25): error TS2345: Argument of type 'number' is not assignable to parameter of type 'bigint'.
tests/cases/compiler/bigintWithLib.ts(46,26): error TS2345: Argument of type 'number' is not assignable to parameter of type 'bigint'.


==== tests/cases/compiler/bigintWithLib.ts (7 errors) ====
    // Test BigInt functions
    let bigintVal: bigint = BigInt(123);
    bigintVal = BigInt("456");
    new BigInt(123); // should error
    ~~~~~~~~~~~~~~~
!!! error TS2350: Only a void function can be called with the 'new' keyword.
    bigintVal = BigInt.asIntN(8, 0xFFFFn);
    bigintVal = BigInt.asUintN(8, 0xFFFFn);
    bigintVal = bigintVal.valueOf();
    let stringVal: string = bigintVal.toString();
    stringVal = bigintVal.toString(2);
    stringVal = bigintVal.toLocaleString();
    stringVal = bigintVal.toLocaleString('de-DE');
    stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency' });
    stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' })
    
    // Test BigInt64Array
    let bigIntArray: BigInt64Array = new BigInt64Array();
    bigIntArray = new BigInt64Array(10);
    bigIntArray = new BigInt64Array([1n, 2n, 3n]);
    bigIntArray = new BigInt64Array([1, 2, 3]); // should error
                                    ~~~~~~~~~
!!! error TS2769: No overload matches this call.
!!! error TS2769:   Overload 1 of 3, '(length?: number): BigInt64Array', gave the following error.
!!! error TS2769:     Argument of type 'number[]' is not assignable to parameter of type 'number'.
!!! error TS2769:   Overload 2 of 3, '(array: Iterable<bigint>): BigInt64Array', gave the following error.
!!! error TS2769:     Argument of type 'number[]' is not assignable to parameter of type 'Iterable<bigint>'.
!!! error TS2769:       The types returned by '[Symbol.iterator]().next(...)' are incompatible between these types.
!!! error TS2769:         Type 'IteratorResult<number, any>' is not assignable to type 'IteratorResult<bigint, any>'.
!!! error TS2769:           Type 'IteratorYieldResult<number>' is not assignable to type 'IteratorResult<bigint, any>'.
!!! error TS2769:             Type 'IteratorYieldResult<number>' is not assignable to type 'IteratorYieldResult<bigint>'.
!!! error TS2769:               Type 'number' is not assignable to type 'bigint'.
!!! error TS2769:   Overload 3 of 3, '(buffer: ArrayBufferLike, byteOffset?: number, length?: number): BigInt64Array', gave the following error.
!!! error TS2769:     Argument of type 'number[]' is not assignable to parameter of type 'ArrayBufferLike'.
!!! error TS2769:       Type 'number[]' is missing the following properties from type 'SharedArrayBuffer': byteLength, [Symbol.species], [Symbol.toStringTag]
    bigIntArray = new BigInt64Array(new ArrayBuffer(80));
    bigIntArray = new BigInt64Array(new ArrayBuffer(80), 8);
    bigIntArray = new BigInt64Array(new ArrayBuffer(80), 8, 3);
    let len: number = bigIntArray.length;
    bigIntArray.length = 10; // should error
                ~~~~~~
!!! error TS2540: Cannot assign to 'length' because it is a read-only property.
    let arrayBufferLike: ArrayBufferView = bigIntArray;
    
    // Test BigUint64Array
    let bigUintArray: BigUint64Array = new BigUint64Array();
    bigUintArray = new BigUint64Array(10);
    bigUintArray = new BigUint64Array([1n, 2n, 3n]);
    bigUintArray = new BigUint64Array([1, 2, 3]); // should error
                                      ~~~~~~~~~
!!! error TS2769: No overload matches this call.
!!! error TS2769:   Overload 1 of 3, '(length?: number): BigUint64Array', gave the following error.
!!! error TS2769:     Argument of type 'number[]' is not assignable to parameter of type 'number'.
!!! error TS2769:   Overload 2 of 3, '(array: Iterable<bigint>): BigUint64Array', gave the following error.
!!! error TS2769:     Argument of type 'number[]' is not assignable to parameter of type 'Iterable<bigint>'.
!!! error TS2769:   Overload 3 of 3, '(buffer: ArrayBufferLike, byteOffset?: number, length?: number): BigUint64Array', gave the following error.
!!! error TS2769:     Argument of type 'number[]' is not assignable to parameter of type 'ArrayBufferLike'.
    bigUintArray = new BigUint64Array(new ArrayBuffer(80));
    bigUintArray = new BigUint64Array(new ArrayBuffer(80), 8);
    bigUintArray = new BigUint64Array(new ArrayBuffer(80), 8, 3);
    len = bigIntArray.length;
    bigIntArray.length = 10; // should error
                ~~~~~~
!!! error TS2540: Cannot assign to 'length' because it is a read-only property.
    arrayBufferLike = bigIntArray;
    
    // Test added DataView methods
    const dataView = new DataView(new ArrayBuffer(80));
    dataView.setBigInt64(1, -1n);
    dataView.setBigInt64(1, -1n, true);
    dataView.setBigInt64(1, -1); // should error
                            ~~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'bigint'.
    dataView.setBigUint64(2, 123n);
    dataView.setBigUint64(2, 123n, true);
    dataView.setBigUint64(2, 123); // should error
                             ~~~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'bigint'.
    bigintVal = dataView.getBigInt64(1);
    bigintVal = dataView.getBigInt64(1, true);
    bigintVal = dataView.getBigUint64(2);
    bigintVal = dataView.getBigUint64(2, true);
    
    // Test emitted declarations files
    const w = 12n; // should emit as const w = 12n
    const x = -12n; // should emit as const x = -12n
    const y: 12n = 12n; // should emit type 12n
    let z = 12n; // should emit type bigint in declaration file
    
    // Test Intl methods with new parameter type
    new Intl.NumberFormat("fr").format(3000n);
    new Intl.NumberFormat("fr").format(bigintVal);
    