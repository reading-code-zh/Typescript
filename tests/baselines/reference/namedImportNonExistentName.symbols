=== tests/cases/compiler/foo.d.ts ===
export = Foo;
>Foo : Symbol(Foo, Decl(foo.d.ts, 1, 24))

export as namespace Foo;
>Foo : Symbol(Foo, Decl(foo.d.ts, 0, 13))

declare namespace Foo {
>Foo : Symbol(Foo, Decl(foo.d.ts, 1, 24))

    function foo();
>foo : Symbol(foo, Decl(foo.d.ts, 3, 23))
}

=== tests/cases/compiler/foo2.ts ===
let x: { a: string; c: string; } | { b: number; c: number; };
>x : Symbol(x, Decl(foo2.ts, 0, 3))
>a : Symbol(a, Decl(foo2.ts, 0, 8))
>c : Symbol(c, Decl(foo2.ts, 0, 19))
>b : Symbol(b, Decl(foo2.ts, 0, 36))
>c : Symbol(c, Decl(foo2.ts, 0, 47))

export = x
>x : Symbol(x, Decl(foo2.ts, 0, 3))

=== tests/cases/compiler/bar.ts ===
import { Bar, toString, foo } from './foo';
>Bar : Symbol(Bar, Decl(bar.ts, 0, 8))
>toString : Symbol(toString, Decl(bar.ts, 0, 13))
>foo : Symbol(foo, Decl(bar.ts, 0, 23))

foo();
>foo : Symbol(foo, Decl(bar.ts, 0, 23))

import { a, b, c, d, toString as foo2String } from './foo2';
>a : Symbol(a, Decl(bar.ts, 2, 8))
>b : Symbol(b, Decl(bar.ts, 2, 11))
>c : Symbol(c, Decl(bar.ts, 2, 14))
>d : Symbol(d, Decl(bar.ts, 2, 17))
>foo2String : Symbol(foo2String, Decl(bar.ts, 2, 20))

c;
>c : Symbol(c, Decl(bar.ts, 2, 14))

