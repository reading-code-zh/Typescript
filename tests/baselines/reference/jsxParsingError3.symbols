=== tests/cases/conformance/jsx/file.tsx ===
declare module JSX {
>JSX : Symbol(JSX, Decl(file.tsx, 0, 0))

  interface Element {}
>Element : Symbol(Element, Decl(file.tsx, 0, 20))

  interface IntrinsicElements {
>IntrinsicElements : Symbol(IntrinsicElements, Decl(file.tsx, 1, 22))

    [s: string]: any;
>s : Symbol(s, Decl(file.tsx, 3, 5))
  }
}

=== tests/cases/conformance/jsx/Error1.tsx ===
let x1 = <div>}</div>;
>x1 : Symbol(x1, Decl(Error1.tsx, 0, 3))
>div : Symbol(JSX.IntrinsicElements, Decl(file.tsx, 1, 22))
>div : Symbol(JSX.IntrinsicElements, Decl(file.tsx, 1, 22))

=== tests/cases/conformance/jsx/Error2.tsx ===
let x2 = <div>></div>;
>x2 : Symbol(x2, Decl(Error2.tsx, 0, 3))
>div : Symbol(JSX.IntrinsicElements, Decl(file.tsx, 1, 22))
>div : Symbol(JSX.IntrinsicElements, Decl(file.tsx, 1, 22))

=== tests/cases/conformance/jsx/Error3.tsx ===
let x3 = <div>{"foo"}}</div>;
>x3 : Symbol(x3, Decl(Error3.tsx, 0, 3))
>div : Symbol(JSX.IntrinsicElements, Decl(file.tsx, 1, 22))
>div : Symbol(JSX.IntrinsicElements, Decl(file.tsx, 1, 22))

=== tests/cases/conformance/jsx/Error4.tsx ===
let x4 = <div>{"foo"}></div>;
>x4 : Symbol(x4, Decl(Error4.tsx, 0, 3))
>div : Symbol(JSX.IntrinsicElements, Decl(file.tsx, 1, 22))
>div : Symbol(JSX.IntrinsicElements, Decl(file.tsx, 1, 22))

=== tests/cases/conformance/jsx/Error5.tsx ===
let x5 = <div>}{"foo"}</div>;
>x5 : Symbol(x5, Decl(Error5.tsx, 0, 3))
>div : Symbol(JSX.IntrinsicElements, Decl(file.tsx, 1, 22))
>div : Symbol(JSX.IntrinsicElements, Decl(file.tsx, 1, 22))

=== tests/cases/conformance/jsx/Error6.tsx ===
let x6 = <div>>{"foo"}</div>;
>x6 : Symbol(x6, Decl(Error6.tsx, 0, 3))
>div : Symbol(JSX.IntrinsicElements, Decl(file.tsx, 1, 22))
>div : Symbol(JSX.IntrinsicElements, Decl(file.tsx, 1, 22))

