=== tests/cases/compiler/mappedTypeAsStringTemplate.ts ===
// Repro from #44220

function foo<T extends { [K in keyof T as `${Extract<K, string>}y`]: number }>(foox: T) { }
>foo : Symbol(foo, Decl(mappedTypeAsStringTemplate.ts, 0, 0))
>T : Symbol(T, Decl(mappedTypeAsStringTemplate.ts, 2, 13))
>K : Symbol(K, Decl(mappedTypeAsStringTemplate.ts, 2, 26))
>T : Symbol(T, Decl(mappedTypeAsStringTemplate.ts, 2, 13))
>Extract : Symbol(Extract, Decl(lib.es5.d.ts, --, --))
>K : Symbol(K, Decl(mappedTypeAsStringTemplate.ts, 2, 26))
>foox : Symbol(foox, Decl(mappedTypeAsStringTemplate.ts, 2, 79))
>T : Symbol(T, Decl(mappedTypeAsStringTemplate.ts, 2, 13))

const c = { x: 1 };
>c : Symbol(c, Decl(mappedTypeAsStringTemplate.ts, 4, 5))
>x : Symbol(x, Decl(mappedTypeAsStringTemplate.ts, 4, 11))

foo(c);
>foo : Symbol(foo, Decl(mappedTypeAsStringTemplate.ts, 0, 0))
>c : Symbol(c, Decl(mappedTypeAsStringTemplate.ts, 4, 5))

