=== tests/cases/conformance/classes/members/privateNames/privateNameStaticFieldCallExpression.ts ===
class A {
>A : Symbol(A, Decl(privateNameStaticFieldCallExpression.ts, 0, 0))

    static #fieldFunc = function () { this.x = 10; };
>#fieldFunc : Symbol(A.#fieldFunc, Decl(privateNameStaticFieldCallExpression.ts, 0, 9))

    static #fieldFunc2 = function (a, ...b) {};
>#fieldFunc2 : Symbol(A.#fieldFunc2, Decl(privateNameStaticFieldCallExpression.ts, 1, 53))
>a : Symbol(a, Decl(privateNameStaticFieldCallExpression.ts, 2, 35))
>b : Symbol(b, Decl(privateNameStaticFieldCallExpression.ts, 2, 37))

    x = 1;
>x : Symbol(A.x, Decl(privateNameStaticFieldCallExpression.ts, 2, 47))

    test() {
>test : Symbol(A.test, Decl(privateNameStaticFieldCallExpression.ts, 3, 10))

        A.#fieldFunc();
>A.#fieldFunc : Symbol(A.#fieldFunc, Decl(privateNameStaticFieldCallExpression.ts, 0, 9))
>A : Symbol(A, Decl(privateNameStaticFieldCallExpression.ts, 0, 0))

        A.#fieldFunc?.();
>A.#fieldFunc : Symbol(A.#fieldFunc, Decl(privateNameStaticFieldCallExpression.ts, 0, 9))
>A : Symbol(A, Decl(privateNameStaticFieldCallExpression.ts, 0, 0))

        const func = A.#fieldFunc;
>func : Symbol(func, Decl(privateNameStaticFieldCallExpression.ts, 7, 13))
>A.#fieldFunc : Symbol(A.#fieldFunc, Decl(privateNameStaticFieldCallExpression.ts, 0, 9))
>A : Symbol(A, Decl(privateNameStaticFieldCallExpression.ts, 0, 0))

        func();
>func : Symbol(func, Decl(privateNameStaticFieldCallExpression.ts, 7, 13))

        new A.#fieldFunc();
>A.#fieldFunc : Symbol(A.#fieldFunc, Decl(privateNameStaticFieldCallExpression.ts, 0, 9))
>A : Symbol(A, Decl(privateNameStaticFieldCallExpression.ts, 0, 0))

        const arr = [ 1, 2 ];
>arr : Symbol(arr, Decl(privateNameStaticFieldCallExpression.ts, 11, 13))

        A.#fieldFunc2(0, ...arr, 3);
>A.#fieldFunc2 : Symbol(A.#fieldFunc2, Decl(privateNameStaticFieldCallExpression.ts, 1, 53))
>A : Symbol(A, Decl(privateNameStaticFieldCallExpression.ts, 0, 0))
>arr : Symbol(arr, Decl(privateNameStaticFieldCallExpression.ts, 11, 13))

        const b = new A.#fieldFunc2(0, ...arr, 3);
>b : Symbol(b, Decl(privateNameStaticFieldCallExpression.ts, 13, 13))
>A.#fieldFunc2 : Symbol(A.#fieldFunc2, Decl(privateNameStaticFieldCallExpression.ts, 1, 53))
>A : Symbol(A, Decl(privateNameStaticFieldCallExpression.ts, 0, 0))
>arr : Symbol(arr, Decl(privateNameStaticFieldCallExpression.ts, 11, 13))

        const str = A.#fieldFunc2`head${1}middle${2}tail`;
>str : Symbol(str, Decl(privateNameStaticFieldCallExpression.ts, 14, 13))
>A.#fieldFunc2 : Symbol(A.#fieldFunc2, Decl(privateNameStaticFieldCallExpression.ts, 1, 53))
>A : Symbol(A, Decl(privateNameStaticFieldCallExpression.ts, 0, 0))

        this.getClass().#fieldFunc2`test${1}and${2}`;
>this.getClass().#fieldFunc2 : Symbol(A.#fieldFunc2, Decl(privateNameStaticFieldCallExpression.ts, 1, 53))
>this.getClass : Symbol(A.getClass, Decl(privateNameStaticFieldCallExpression.ts, 16, 5))
>this : Symbol(A, Decl(privateNameStaticFieldCallExpression.ts, 0, 0))
>getClass : Symbol(A.getClass, Decl(privateNameStaticFieldCallExpression.ts, 16, 5))
    }
    getClass() { return A; }
>getClass : Symbol(A.getClass, Decl(privateNameStaticFieldCallExpression.ts, 16, 5))
>A : Symbol(A, Decl(privateNameStaticFieldCallExpression.ts, 0, 0))
}

