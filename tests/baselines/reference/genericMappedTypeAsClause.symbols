=== tests/cases/compiler/genericMappedTypeAsClause.ts ===
type Model = {
>Model : Symbol(Model, Decl(genericMappedTypeAsClause.ts, 0, 0))

    a: string;
>a : Symbol(a, Decl(genericMappedTypeAsClause.ts, 0, 14))

    b: number;
>b : Symbol(b, Decl(genericMappedTypeAsClause.ts, 1, 14))

};

type MappedModel<Suffix extends string> = {
>MappedModel : Symbol(MappedModel, Decl(genericMappedTypeAsClause.ts, 3, 2))
>Suffix : Symbol(Suffix, Decl(genericMappedTypeAsClause.ts, 5, 17))

    [K in keyof Model as `${K}${Suffix}`]: Model[K];
>K : Symbol(K, Decl(genericMappedTypeAsClause.ts, 6, 5))
>Model : Symbol(Model, Decl(genericMappedTypeAsClause.ts, 0, 0))
>K : Symbol(K, Decl(genericMappedTypeAsClause.ts, 6, 5))
>Suffix : Symbol(Suffix, Decl(genericMappedTypeAsClause.ts, 5, 17))
>Model : Symbol(Model, Decl(genericMappedTypeAsClause.ts, 0, 0))
>K : Symbol(K, Decl(genericMappedTypeAsClause.ts, 6, 5))

};

const foo1: MappedModel<'Foo'> = { aFoo: 'test', bFoo: 42 };
>foo1 : Symbol(foo1, Decl(genericMappedTypeAsClause.ts, 9, 5))
>MappedModel : Symbol(MappedModel, Decl(genericMappedTypeAsClause.ts, 3, 2))
>aFoo : Symbol(aFoo, Decl(genericMappedTypeAsClause.ts, 9, 34))
>bFoo : Symbol(bFoo, Decl(genericMappedTypeAsClause.ts, 9, 48))

const foo2: MappedModel<'Foo'> = { bFoo: 'bar' };  // Error
>foo2 : Symbol(foo2, Decl(genericMappedTypeAsClause.ts, 10, 5))
>MappedModel : Symbol(MappedModel, Decl(genericMappedTypeAsClause.ts, 3, 2))
>bFoo : Symbol(bFoo, Decl(genericMappedTypeAsClause.ts, 10, 34))

function f1<T extends string>() {
>f1 : Symbol(f1, Decl(genericMappedTypeAsClause.ts, 10, 49))
>T : Symbol(T, Decl(genericMappedTypeAsClause.ts, 12, 12))

    const x1: MappedModel<T> = 42;  // Error
>x1 : Symbol(x1, Decl(genericMappedTypeAsClause.ts, 13, 9))
>MappedModel : Symbol(MappedModel, Decl(genericMappedTypeAsClause.ts, 3, 2))
>T : Symbol(T, Decl(genericMappedTypeAsClause.ts, 12, 12))

    const x2: MappedModel<T> = 'test';  // Error
>x2 : Symbol(x2, Decl(genericMappedTypeAsClause.ts, 14, 9))
>MappedModel : Symbol(MappedModel, Decl(genericMappedTypeAsClause.ts, 3, 2))
>T : Symbol(T, Decl(genericMappedTypeAsClause.ts, 12, 12))

    const x3: MappedModel<T> = [1, 2, 3];  // Error
>x3 : Symbol(x3, Decl(genericMappedTypeAsClause.ts, 15, 9))
>MappedModel : Symbol(MappedModel, Decl(genericMappedTypeAsClause.ts, 3, 2))
>T : Symbol(T, Decl(genericMappedTypeAsClause.ts, 12, 12))

    const x4: MappedModel<T> = false;  // Error
>x4 : Symbol(x4, Decl(genericMappedTypeAsClause.ts, 16, 9))
>MappedModel : Symbol(MappedModel, Decl(genericMappedTypeAsClause.ts, 3, 2))
>T : Symbol(T, Decl(genericMappedTypeAsClause.ts, 12, 12))

    const x5: MappedModel<T> = { a: 'bar', b: 42 };  // Error
>x5 : Symbol(x5, Decl(genericMappedTypeAsClause.ts, 17, 9))
>MappedModel : Symbol(MappedModel, Decl(genericMappedTypeAsClause.ts, 3, 2))
>T : Symbol(T, Decl(genericMappedTypeAsClause.ts, 12, 12))
>a : Symbol(a, Decl(genericMappedTypeAsClause.ts, 17, 32))
>b : Symbol(b, Decl(genericMappedTypeAsClause.ts, 17, 42))

    const x6: MappedModel<T> = undefined;  // Error
>x6 : Symbol(x6, Decl(genericMappedTypeAsClause.ts, 18, 9))
>MappedModel : Symbol(MappedModel, Decl(genericMappedTypeAsClause.ts, 3, 2))
>T : Symbol(T, Decl(genericMappedTypeAsClause.ts, 12, 12))
>undefined : Symbol(undefined)
}

