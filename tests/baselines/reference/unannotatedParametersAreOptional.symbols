=== tests/cases/conformance/salsa/test.js ===
function f(x) {}
>f : Symbol(f, Decl(test.js, 0, 0))
>x : Symbol(x, Decl(test.js, 0, 11))

f(); // Always been ok
>f : Symbol(f, Decl(test.js, 0, 0))

class C {
>C : Symbol(C, Decl(test.js, 1, 4))

  static m(x) {}
>m : Symbol(C.m, Decl(test.js, 3, 9))
>x : Symbol(x, Decl(test.js, 4, 11))

  p = x => {}
>p : Symbol(C.p, Decl(test.js, 4, 16))
>x : Symbol(x, Decl(test.js, 5, 5))

  m(x) {}
>m : Symbol(C.m, Decl(test.js, 5, 13))
>x : Symbol(x, Decl(test.js, 6, 4))
}

C.m();       // Always been ok
>C.m : Symbol(C.m, Decl(test.js, 3, 9))
>C : Symbol(C, Decl(test.js, 1, 4))
>m : Symbol(C.m, Decl(test.js, 3, 9))

new C().m(); // Regression #39261
>new C().m : Symbol(C.m, Decl(test.js, 5, 13))
>C : Symbol(C, Decl(test.js, 1, 4))
>m : Symbol(C.m, Decl(test.js, 5, 13))

new C().p(); // Regression #39261
>new C().p : Symbol(C.p, Decl(test.js, 4, 16))
>C : Symbol(C, Decl(test.js, 1, 4))
>p : Symbol(C.p, Decl(test.js, 4, 16))

const obj = {
>obj : Symbol(obj, Decl(test.js, 13, 5))

  m(x) {},
>m : Symbol(m, Decl(test.js, 13, 13))
>x : Symbol(x, Decl(test.js, 14, 4))

  p: x => {}
>p : Symbol(p, Decl(test.js, 14, 10))
>x : Symbol(x, Decl(test.js, 15, 4))

};

obj.m(); // Always been ok
>obj.m : Symbol(m, Decl(test.js, 13, 13))
>obj : Symbol(obj, Decl(test.js, 13, 5))
>m : Symbol(m, Decl(test.js, 13, 13))

obj.p(); // Always been ok
>obj.p : Symbol(p, Decl(test.js, 14, 10))
>obj : Symbol(obj, Decl(test.js, 13, 5))
>p : Symbol(p, Decl(test.js, 14, 10))

