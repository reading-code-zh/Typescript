=== tests/cases/compiler/ConstEnum.d.ts ===
export const enum MyConstEnum {
>MyConstEnum : Symbol(MyConstEnum, Decl(ConstEnum.d.ts, 0, 0))

    Foo,
>Foo : Symbol(MyConstEnum.Foo, Decl(ConstEnum.d.ts, 0, 31))

    Bar
>Bar : Symbol(MyConstEnum.Bar, Decl(ConstEnum.d.ts, 1, 8))
}
=== tests/cases/compiler/ImportExport.d.ts ===
import { MyConstEnum } from './ConstEnum';
>MyConstEnum : Symbol(MyConstEnum, Decl(ImportExport.d.ts, 0, 8))

export default MyConstEnum;
>MyConstEnum : Symbol(MyConstEnum, Decl(ImportExport.d.ts, 0, 8))

=== tests/cases/compiler/ReExport.d.ts ===
export { MyConstEnum as default } from './ConstEnum';
>MyConstEnum : Symbol(MyConstEnum, Decl(ConstEnum.d.ts, 0, 0))
>default : Symbol(default, Decl(ReExport.d.ts, 0, 8))

=== tests/cases/compiler/usages.ts ===
import {MyConstEnum} from "./ConstEnum";
>MyConstEnum : Symbol(MyConstEnum, Decl(usages.ts, 0, 8))

import AlsoEnum from "./ImportExport";
>AlsoEnum : Symbol(AlsoEnum, Decl(usages.ts, 1, 6))

import StillEnum from "./ReExport";
>StillEnum : Symbol(StillEnum, Decl(usages.ts, 2, 6))

MyConstEnum.Foo;
>MyConstEnum.Foo : Symbol(MyConstEnum.Foo, Decl(ConstEnum.d.ts, 0, 31))
>MyConstEnum : Symbol(MyConstEnum, Decl(usages.ts, 0, 8))
>Foo : Symbol(MyConstEnum.Foo, Decl(ConstEnum.d.ts, 0, 31))

AlsoEnum.Foo;
>AlsoEnum.Foo : Symbol(MyConstEnum.Foo, Decl(ConstEnum.d.ts, 0, 31))
>AlsoEnum : Symbol(AlsoEnum, Decl(usages.ts, 1, 6))
>Foo : Symbol(MyConstEnum.Foo, Decl(ConstEnum.d.ts, 0, 31))

StillEnum.Foo;
>StillEnum.Foo : Symbol(MyConstEnum.Foo, Decl(ConstEnum.d.ts, 0, 31))
>StillEnum : Symbol(StillEnum, Decl(usages.ts, 2, 6))
>Foo : Symbol(MyConstEnum.Foo, Decl(ConstEnum.d.ts, 0, 31))

