=== tests/cases/compiler/tryCatchFinallyControlFlow.ts ===
// Repro from #34797

function f1() {
>f1 : Symbol(f1, Decl(tryCatchFinallyControlFlow.ts, 0, 0))

    let a: number | null = null;
>a : Symbol(a, Decl(tryCatchFinallyControlFlow.ts, 3, 7))

    try {
        a = 123;
>a : Symbol(a, Decl(tryCatchFinallyControlFlow.ts, 3, 7))

        return a;
>a : Symbol(a, Decl(tryCatchFinallyControlFlow.ts, 3, 7))
    }
    catch (e) {
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 8, 11))

        throw e;
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 8, 11))
    }
    finally {
        if (a != null && a.toFixed(0) == "123") { 
>a : Symbol(a, Decl(tryCatchFinallyControlFlow.ts, 3, 7))
>a.toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
>a : Symbol(a, Decl(tryCatchFinallyControlFlow.ts, 3, 7))
>toFixed : Symbol(Number.toFixed, Decl(lib.es5.d.ts, --, --))
        }
    }
}

function f2() {
>f2 : Symbol(f2, Decl(tryCatchFinallyControlFlow.ts, 15, 1))

    let x: 0 | 1 | 2 | 3 = 0;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 18, 7))

    try {
        x = 1;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 18, 7))
    }
    catch (e) {
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 22, 11))

        x = 2;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 18, 7))

        throw e;
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 22, 11))
    }
    finally {
        x;  // 0 | 1 | 2
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 18, 7))
    }
    x;  // 1
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 18, 7))
}

function f3() {
>f3 : Symbol(f3, Decl(tryCatchFinallyControlFlow.ts, 30, 1))

    let x: 0 | 1 | 2 | 3 = 0;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 33, 7))

    try {
        x = 1;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 33, 7))
    }
    catch (e) {
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 37, 11))

        x = 2;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 33, 7))

        return;
    }
    finally {
        x;  // 0 | 1 | 2
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 33, 7))
    }
    x;  // 1
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 33, 7))
}

function f4() {
>f4 : Symbol(f4, Decl(tryCatchFinallyControlFlow.ts, 45, 1))

    let x: 0 | 1 | 2 | 3 = 0;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 48, 7))

    try {
        x = 1;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 48, 7))
    }
    catch (e) {
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 52, 11))

        x = 2;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 48, 7))
    }
    finally {
        x;  // 0 | 1 | 2
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 48, 7))
    }
    x;  // 1 | 2
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 48, 7))
}

function f5() {
>f5 : Symbol(f5, Decl(tryCatchFinallyControlFlow.ts, 59, 1))

    let x: 0 | 1 | 2 | 3 = 0;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 62, 7))

    try {
        x = 1;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 62, 7))

        return;
    }
    catch (e) {
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 67, 11))

        x = 2;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 62, 7))
    }
    finally {
        x;  // 0 | 1 | 2
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 62, 7))
    }
    x;  // 2
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 62, 7))
}

function f6() {
>f6 : Symbol(f6, Decl(tryCatchFinallyControlFlow.ts, 74, 1))

    let x: 0 | 1 | 2 | 3 = 0;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 77, 7))

    try {
        x = 1;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 77, 7))
    }
    catch (e) {
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 81, 11))

        x = 2;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 77, 7))

        return;
    }
    finally {
        x;  // 0 | 1 | 2
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 77, 7))
    }
    x;  // 1
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 77, 7))
}

function f7() {
>f7 : Symbol(f7, Decl(tryCatchFinallyControlFlow.ts, 89, 1))

    let x: 0 | 1 | 2 | 3 = 0;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 92, 7))

    try {
        x = 1;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 92, 7))

        return;
    }
    catch (e) {
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 97, 11))

        x = 2;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 92, 7))

        return;
    }
    finally {
        x;  // 0 | 1 | 2
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 92, 7))
    }
    x;  // Unreachable
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 92, 7))
}

function f8() {
>f8 : Symbol(f8, Decl(tryCatchFinallyControlFlow.ts, 105, 1))

    let x: 0 | 1 = 0;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 108, 7))

    (() => {
        try {
            x = 1;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 108, 7))

            return;
        }
        finally {
            x;  // 0 | 1
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 108, 7))
        }
        x;  // Unreachable
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 108, 7))

    })();
    x;  // 1
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 108, 7))
}

function f9() {
>f9 : Symbol(f9, Decl(tryCatchFinallyControlFlow.ts, 120, 1))

    let x: 0 | 1 | 2 = 0;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 123, 7))

    (() => {
        try {
            if (!!true) {
                x = 1;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 123, 7))

                return;
            }
        }
        finally {
            x;  // 0 | 1
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 123, 7))
        }
        x;  // 0
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 123, 7))

        x = 2;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 123, 7))

    })();
    x;  // 1 | 2
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 123, 7))
}

function f10() {
>f10 : Symbol(f10, Decl(tryCatchFinallyControlFlow.ts, 138, 1))

    let x: 0 | 1 | 2 | 3 = 0;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 141, 7))

    (() => {
        try {
            x = 1;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 141, 7))

            return;
        }
        catch (e) {
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 147, 15))

            x = 2;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 141, 7))
        }
        finally {
            x;  // 0 | 1 | 2
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 141, 7))
        }
        x;  // 2
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 141, 7))

        x = 3;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 141, 7))

    })();
    x;  // 1 | 3
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 141, 7))
}

function f11() {
>f11 : Symbol(f11, Decl(tryCatchFinallyControlFlow.ts, 157, 1))

    let x: 0 | 1 | 2 | 3 | 4 | 5 = 0;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 160, 7))

    (() => {
        try {
            if (!!true) {
                x = 1;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 160, 7))

                return;
            }
            if (!!true) {
                x = 2;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 160, 7))

                throw 0;
            }
        }
        catch (e) {
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 172, 15))

            x;  // 0 | 1 | 2
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 160, 7))

            x = 3;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 160, 7))
        }
        finally {
            x;  // 0 | 1 | 2 | 3
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 160, 7))

            if (!!true) {
                x = 4;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 160, 7))
            }
        }
        x;  // 0 | 3 | 4
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 160, 7))

        x = 5;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 160, 7))

    })();
    x;  // 1 | 4 | 5
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 160, 7))
}

function f12() {
>f12 : Symbol(f12, Decl(tryCatchFinallyControlFlow.ts, 186, 1))

    let x: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 = 0;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 189, 7))

    (() => {
        try {
            if (!!true) {
                x = 1;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 189, 7))

                return;
            }
            if (!!true) {
                x = 2;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 189, 7))

                throw 0;
            }
        }
        catch (e) {
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 201, 15))

            x;  // 0 | 1 | 2
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 189, 7))

            x = 3;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 189, 7))
        }
        finally {
            x;  // 0 | 1 | 2 | 3
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 189, 7))

            if (!!true) {
                x = 4;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 189, 7))

                return;
            }
            if (!!true) {
                x = 5;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 189, 7))

                return;
            }
            x = 6;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 189, 7))

            return;
            x; // unreachable
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 189, 7))
        }
        x; // unreachable
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 189, 7))

        x = 7; // no effect
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 189, 7))

    })();
    x;  // 4 | 5 | 6
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 189, 7))
}

// Repro from #35644

const main = () => {
>main : Symbol(main, Decl(tryCatchFinallyControlFlow.ts, 227, 5))

    let hoge: string | undefined = undefined;
>hoge : Symbol(hoge, Decl(tryCatchFinallyControlFlow.ts, 228, 7))
>undefined : Symbol(undefined)

    try {
        hoge = 'hoge!';
>hoge : Symbol(hoge, Decl(tryCatchFinallyControlFlow.ts, 228, 7))

        return;
    }
    catch {
        return;
    }
    finally {
        if (hoge) {
>hoge : Symbol(hoge, Decl(tryCatchFinallyControlFlow.ts, 228, 7))

            hoge.length;
>hoge.length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
>hoge : Symbol(hoge, Decl(tryCatchFinallyControlFlow.ts, 228, 7))
>length : Symbol(String.length, Decl(lib.es5.d.ts, --, --))
        }
        return;
    }
}

// Repro from #36828

function t1() {
>t1 : Symbol(t1, Decl(tryCatchFinallyControlFlow.ts, 242, 1))

    const x = (() => {
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 247, 9))

        try {
            return 'x';
        }
        catch (e) {
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 251, 15))

            return null;
        }
        x;  // Unreachable
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 247, 9))

    })();
    x;  // Reachable
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 247, 9))
}

// Repro from #39043

type State = { tag: "one" } | { tag: "two" } | { tag: "three" };
>State : Symbol(State, Decl(tryCatchFinallyControlFlow.ts, 257, 1))
>tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 261, 14))
>tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 261, 31))
>tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 261, 48))

function notallowed(arg: number) {
>notallowed : Symbol(notallowed, Decl(tryCatchFinallyControlFlow.ts, 261, 64))
>arg : Symbol(arg, Decl(tryCatchFinallyControlFlow.ts, 263, 20))

    let state: State = { tag: "one" };
>state : Symbol(state, Decl(tryCatchFinallyControlFlow.ts, 264, 7))
>State : Symbol(State, Decl(tryCatchFinallyControlFlow.ts, 257, 1))
>tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 264, 24))

    try {
        state = { tag: "two" };
>state : Symbol(state, Decl(tryCatchFinallyControlFlow.ts, 264, 7))
>tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 266, 17))

        try {
            state = { tag: "three" };
>state : Symbol(state, Decl(tryCatchFinallyControlFlow.ts, 264, 7))
>tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 268, 21))
        }
        finally { }
    }
    catch (err) {
>err : Symbol(err, Decl(tryCatchFinallyControlFlow.ts, 272, 11))

        state.tag;
>state.tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 261, 14), Decl(tryCatchFinallyControlFlow.ts, 261, 31), Decl(tryCatchFinallyControlFlow.ts, 261, 48))
>state : Symbol(state, Decl(tryCatchFinallyControlFlow.ts, 264, 7))
>tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 261, 14), Decl(tryCatchFinallyControlFlow.ts, 261, 31), Decl(tryCatchFinallyControlFlow.ts, 261, 48))

        if (state.tag !== "one" && state.tag !== "two") {
>state.tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 261, 14), Decl(tryCatchFinallyControlFlow.ts, 261, 31), Decl(tryCatchFinallyControlFlow.ts, 261, 48))
>state : Symbol(state, Decl(tryCatchFinallyControlFlow.ts, 264, 7))
>tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 261, 14), Decl(tryCatchFinallyControlFlow.ts, 261, 31), Decl(tryCatchFinallyControlFlow.ts, 261, 48))
>state.tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 261, 31), Decl(tryCatchFinallyControlFlow.ts, 261, 48))
>state : Symbol(state, Decl(tryCatchFinallyControlFlow.ts, 264, 7))
>tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 261, 31), Decl(tryCatchFinallyControlFlow.ts, 261, 48))

            console.log(state.tag);
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>state.tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 261, 48))
>state : Symbol(state, Decl(tryCatchFinallyControlFlow.ts, 264, 7))
>tag : Symbol(tag, Decl(tryCatchFinallyControlFlow.ts, 261, 48))
        }
    }
}

function f20() {
>f20 : Symbol(f20, Decl(tryCatchFinallyControlFlow.ts, 278, 1))

    let x: 0 | 1 | 2 | 3 | 4 | 5 | 6 = 0;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 281, 7))

    try {
        x = 1;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 281, 7))

        try {
            x = 2;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 281, 7))

            try {
                x = 3;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 281, 7))
            }
            finally {
                if (!!true) x = 4;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 281, 7))
            }
            x;  // 3 | 4
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 281, 7))
        }
        finally {
            if (!!true) x = 5;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 281, 7))
        }
        x;  // 3 | 4 | 5
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 281, 7))
    }
    finally {
        if (!!true) x = 6;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 281, 7))
    }
    x;  // 3 | 4 | 5 | 6
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 281, 7))
}

function f21() {
>f21 : Symbol(f21, Decl(tryCatchFinallyControlFlow.ts, 303, 1))

    let x: 0 | 1 | 2 | 3 | 4 | 5 = 0;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 306, 7))

    try {
        x = 1;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 306, 7))

        try {
            x = 2;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 306, 7))

            try {
                x = 3;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 306, 7))
            }
            finally {
                if (!!true) x = 4;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 306, 7))
            }
            x;  // 3 | 4
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 306, 7))
        }
        finally {
            if (!!true) x = 5;
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 306, 7))
        }
        x;  // 3 | 4 | 5
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 306, 7))
    }
    catch (e) {
>e : Symbol(e, Decl(tryCatchFinallyControlFlow.ts, 324, 11))

        x;  // 0 | 1 | 2 | 3 | 4 | 5
>x : Symbol(x, Decl(tryCatchFinallyControlFlow.ts, 306, 7))
    }
}

