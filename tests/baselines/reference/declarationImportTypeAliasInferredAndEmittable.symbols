=== tests/cases/compiler/foo.ts ===
class Conn {
>Conn : Symbol(Conn, Decl(foo.ts, 0, 0))

    constructor() { }
    item = 3;
>item : Symbol(Conn.item, Decl(foo.ts, 1, 21))

    method() { }
>method : Symbol(Conn.method, Decl(foo.ts, 2, 13))
}

export = Conn;
>Conn : Symbol(Conn, Decl(foo.ts, 0, 0))

=== tests/cases/compiler/usage.ts ===
type Conn = import("./foo");
>Conn : Symbol(Conn, Decl(usage.ts, 0, 0))

declare var x: Conn;
>x : Symbol(x, Decl(usage.ts, 1, 11))
>Conn : Symbol(Conn, Decl(usage.ts, 0, 0))

export class Wrap {
>Wrap : Symbol(Wrap, Decl(usage.ts, 1, 20))

    connItem: number;
>connItem : Symbol(Wrap.connItem, Decl(usage.ts, 3, 19))

    constructor(c = x) {
>c : Symbol(c, Decl(usage.ts, 5, 16))
>x : Symbol(x, Decl(usage.ts, 1, 11))

        this.connItem = c.item;
>this.connItem : Symbol(Wrap.connItem, Decl(usage.ts, 3, 19))
>this : Symbol(Wrap, Decl(usage.ts, 1, 20))
>connItem : Symbol(Wrap.connItem, Decl(usage.ts, 3, 19))
>c.item : Symbol(Conn.item, Decl(foo.ts, 1, 21))
>c : Symbol(c, Decl(usage.ts, 5, 16))
>item : Symbol(Conn.item, Decl(foo.ts, 1, 21))
    }
}

