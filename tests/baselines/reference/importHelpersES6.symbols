=== tests/cases/compiler/a.ts ===
declare var dec: any;
>dec : Symbol(dec, Decl(a.ts, 0, 11))

@dec export class A {
>dec : Symbol(dec, Decl(a.ts, 0, 11))
>A : Symbol(A, Decl(a.ts, 0, 21))

    #x: number = 1;
>#x : Symbol(A.#x, Decl(a.ts, 1, 21))

    async f() { this.#x = await this.#x; }
>f : Symbol(A.f, Decl(a.ts, 2, 19))
>this.#x : Symbol(A.#x, Decl(a.ts, 1, 21))
>this : Symbol(A, Decl(a.ts, 0, 21))
>this.#x : Symbol(A.#x, Decl(a.ts, 1, 21))
>this : Symbol(A, Decl(a.ts, 0, 21))

    g(u) { return #x in u; }
>g : Symbol(A.g, Decl(a.ts, 3, 42))
>u : Symbol(u, Decl(a.ts, 4, 6))
>#x : Symbol(A.#x, Decl(a.ts, 1, 21))
>u : Symbol(u, Decl(a.ts, 4, 6))
}

const o = { a: 1 };
>o : Symbol(o, Decl(a.ts, 7, 5))
>a : Symbol(a, Decl(a.ts, 7, 11))

const y = { ...o };
>y : Symbol(y, Decl(a.ts, 8, 5))
>o : Symbol(o, Decl(a.ts, 7, 5))

=== tests/cases/compiler/tslib.d.ts ===
export declare function __extends(d: Function, b: Function): void;
>__extends : Symbol(__extends, Decl(tslib.d.ts, --, --))
>d : Symbol(d, Decl(tslib.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>b : Symbol(b, Decl(tslib.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

export declare function __decorate(decorators: Function[], target: any, key?: string | symbol, desc?: any): any;
>__decorate : Symbol(__decorate, Decl(tslib.d.ts, --, --))
>decorators : Symbol(decorators, Decl(tslib.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>target : Symbol(target, Decl(tslib.d.ts, --, --))
>key : Symbol(key, Decl(tslib.d.ts, --, --))
>desc : Symbol(desc, Decl(tslib.d.ts, --, --))

export declare function __param(paramIndex: number, decorator: Function): Function;
>__param : Symbol(__param, Decl(tslib.d.ts, --, --))
>paramIndex : Symbol(paramIndex, Decl(tslib.d.ts, --, --))
>decorator : Symbol(decorator, Decl(tslib.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

export declare function __metadata(metadataKey: any, metadataValue: any): Function;
>__metadata : Symbol(__metadata, Decl(tslib.d.ts, --, --))
>metadataKey : Symbol(metadataKey, Decl(tslib.d.ts, --, --))
>metadataValue : Symbol(metadataValue, Decl(tslib.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

export declare function __awaiter(thisArg: any, _arguments: any, P: Function, generator: Function): any;
>__awaiter : Symbol(__awaiter, Decl(tslib.d.ts, --, --))
>thisArg : Symbol(thisArg, Decl(tslib.d.ts, --, --))
>_arguments : Symbol(_arguments, Decl(tslib.d.ts, --, --))
>P : Symbol(P, Decl(tslib.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>generator : Symbol(generator, Decl(tslib.d.ts, --, --))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.core.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

export declare function __classPrivateFieldGet(a: any, b: any, c: any, d: any): any;
>__classPrivateFieldGet : Symbol(__classPrivateFieldGet, Decl(tslib.d.ts, --, --))
>a : Symbol(a, Decl(tslib.d.ts, --, --))
>b : Symbol(b, Decl(tslib.d.ts, --, --))
>c : Symbol(c, Decl(tslib.d.ts, --, --))
>d : Symbol(d, Decl(tslib.d.ts, --, --))

export declare function __classPrivateFieldSet(a: any, b: any, c: any, d: any, e: any): any;
>__classPrivateFieldSet : Symbol(__classPrivateFieldSet, Decl(tslib.d.ts, --, --))
>a : Symbol(a, Decl(tslib.d.ts, --, --))
>b : Symbol(b, Decl(tslib.d.ts, --, --))
>c : Symbol(c, Decl(tslib.d.ts, --, --))
>d : Symbol(d, Decl(tslib.d.ts, --, --))
>e : Symbol(e, Decl(tslib.d.ts, --, --))

export declare function __classPrivateFieldIn(a: any, b: any): boolean;
>__classPrivateFieldIn : Symbol(__classPrivateFieldIn, Decl(tslib.d.ts, --, --))
>a : Symbol(a, Decl(tslib.d.ts, --, --))
>b : Symbol(b, Decl(tslib.d.ts, --, --))

