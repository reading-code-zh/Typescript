=== tests/cases/compiler/awaitInNonAsyncFunction.ts ===
// https://github.com/Microsoft/TypeScript/issues/26586

function normalFunc(p: Promise<number>) {
>normalFunc : Symbol(normalFunc, Decl(awaitInNonAsyncFunction.ts, 0, 0))
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 2, 20))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2018.promise.d.ts, --, --))

  for await (const _ of []);
>_ : Symbol(_, Decl(awaitInNonAsyncFunction.ts, 3, 18))

  return await p;
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 2, 20))
}

export function exportedFunc(p: Promise<number>) {
>exportedFunc : Symbol(exportedFunc, Decl(awaitInNonAsyncFunction.ts, 5, 1))
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 7, 29))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2018.promise.d.ts, --, --))

  for await (const _ of []);
>_ : Symbol(_, Decl(awaitInNonAsyncFunction.ts, 8, 18))

  return await p;
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 7, 29))
}

const functionExpression = function(p: Promise<number>) {
>functionExpression : Symbol(functionExpression, Decl(awaitInNonAsyncFunction.ts, 12, 5))
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 12, 36))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2018.promise.d.ts, --, --))

  for await (const _ of []);
>_ : Symbol(_, Decl(awaitInNonAsyncFunction.ts, 13, 18))

  await p;
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 12, 36))
}

const arrowFunc = (p: Promise<number>) => {
>arrowFunc : Symbol(arrowFunc, Decl(awaitInNonAsyncFunction.ts, 17, 5))
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 17, 19))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2018.promise.d.ts, --, --))

  for await (const _ of []);
>_ : Symbol(_, Decl(awaitInNonAsyncFunction.ts, 18, 18))

  return await p;
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 17, 19))

};

function* generatorFunc(p: Promise<number>) {
>generatorFunc : Symbol(generatorFunc, Decl(awaitInNonAsyncFunction.ts, 20, 2))
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 22, 24))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2018.promise.d.ts, --, --))

  for await (const _ of []);
>_ : Symbol(_, Decl(awaitInNonAsyncFunction.ts, 23, 18))

  yield await p;
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 22, 24))
}

class clazz {
>clazz : Symbol(clazz, Decl(awaitInNonAsyncFunction.ts, 25, 1))

  constructor(p: Promise<number>) {
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 28, 14))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2018.promise.d.ts, --, --))

    for await (const _ of []);
>_ : Symbol(_, Decl(awaitInNonAsyncFunction.ts, 29, 20))

    await p;
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 28, 14))
  }
  method(p: Promise<number>) {
>method : Symbol(clazz.method, Decl(awaitInNonAsyncFunction.ts, 31, 3))
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 32, 9))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2018.promise.d.ts, --, --))

  for await (const _ of []);
>_ : Symbol(_, Decl(awaitInNonAsyncFunction.ts, 33, 18))

    await p;
>p : Symbol(p, Decl(awaitInNonAsyncFunction.ts, 32, 9))
  }
}

for await (const _ of []);
>_ : Symbol(_, Decl(awaitInNonAsyncFunction.ts, 38, 16))

await null;
