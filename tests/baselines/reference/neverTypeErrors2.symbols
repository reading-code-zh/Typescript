=== tests/cases/conformance/types/never/neverTypeErrors2.ts ===
function f1() {
>f1 : Symbol(f1, Decl(neverTypeErrors2.ts, 0, 0))

    let x: never;
>x : Symbol(x, Decl(neverTypeErrors2.ts, 1, 7))

    x = 1;
>x : Symbol(x, Decl(neverTypeErrors2.ts, 1, 7))

    x = "abc";
>x : Symbol(x, Decl(neverTypeErrors2.ts, 1, 7))

    x = false;
>x : Symbol(x, Decl(neverTypeErrors2.ts, 1, 7))

    x = undefined;
>x : Symbol(x, Decl(neverTypeErrors2.ts, 1, 7))
>undefined : Symbol(undefined)

    x = null;
>x : Symbol(x, Decl(neverTypeErrors2.ts, 1, 7))

    x = {};
>x : Symbol(x, Decl(neverTypeErrors2.ts, 1, 7))

    x();
>x : Symbol(x, Decl(neverTypeErrors2.ts, 1, 7))
}

function f2(): never {
>f2 : Symbol(f2, Decl(neverTypeErrors2.ts, 9, 1))

    return;
}

function f3(): never {
>f3 : Symbol(f3, Decl(neverTypeErrors2.ts, 13, 1))

    return 1;
}

function f4(): never {
>f4 : Symbol(f4, Decl(neverTypeErrors2.ts, 17, 1))
}

for (const n of f4()) {}
>n : Symbol(n, Decl(neverTypeErrors2.ts, 22, 10))
>f4 : Symbol(f4, Decl(neverTypeErrors2.ts, 17, 1))

for (const n in f4()) {}
>n : Symbol(n, Decl(neverTypeErrors2.ts, 23, 10))
>f4 : Symbol(f4, Decl(neverTypeErrors2.ts, 17, 1))

function f5() {
>f5 : Symbol(f5, Decl(neverTypeErrors2.ts, 23, 24))

    let x: never[] = [];  // Ok
>x : Symbol(x, Decl(neverTypeErrors2.ts, 26, 7))
}

// Repro from #46032

interface A {
>A : Symbol(A, Decl(neverTypeErrors2.ts, 27, 1))

    foo: "a";
>foo : Symbol(A.foo, Decl(neverTypeErrors2.ts, 31, 13))
}

interface B {
>B : Symbol(B, Decl(neverTypeErrors2.ts, 33, 1))

    foo: "b";
>foo : Symbol(B.foo, Decl(neverTypeErrors2.ts, 35, 13))
}

type Union = A & B;
>Union : Symbol(Union, Decl(neverTypeErrors2.ts, 37, 1))
>A : Symbol(A, Decl(neverTypeErrors2.ts, 27, 1))
>B : Symbol(B, Decl(neverTypeErrors2.ts, 33, 1))

function func(): { value: Union[] } {
>func : Symbol(func, Decl(neverTypeErrors2.ts, 39, 19))
>value : Symbol(value, Decl(neverTypeErrors2.ts, 41, 18))
>Union : Symbol(Union, Decl(neverTypeErrors2.ts, 37, 1))

    return {
        value: [],
>value : Symbol(value, Decl(neverTypeErrors2.ts, 42, 12))

    };
}

