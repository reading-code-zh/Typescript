=== tests/cases/conformance/classes/members/privateNames/privateNameStaticAccessorsCallExpression.ts ===
class A {
>A : Symbol(A, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 0))

    static get #fieldFunc() {  return function() { A.#x = 10; } }
>#fieldFunc : Symbol(A.#fieldFunc, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 9))
>A.#x : Symbol(A.#x, Decl(privateNameStaticAccessorsCallExpression.ts, 2, 62))
>A : Symbol(A, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 0))

    static get #fieldFunc2() { return  function(a, ...b) {}; }
>#fieldFunc2 : Symbol(A.#fieldFunc2, Decl(privateNameStaticAccessorsCallExpression.ts, 1, 65))
>a : Symbol(a, Decl(privateNameStaticAccessorsCallExpression.ts, 2, 48))
>b : Symbol(b, Decl(privateNameStaticAccessorsCallExpression.ts, 2, 50))

    static #x = 1;
>#x : Symbol(A.#x, Decl(privateNameStaticAccessorsCallExpression.ts, 2, 62))

    static test() {
>test : Symbol(A.test, Decl(privateNameStaticAccessorsCallExpression.ts, 3, 18))

        this.#fieldFunc();
>this.#fieldFunc : Symbol(A.#fieldFunc, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 9))
>this : Symbol(A, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 0))

        const func = this.#fieldFunc;
>func : Symbol(func, Decl(privateNameStaticAccessorsCallExpression.ts, 6, 13))
>this.#fieldFunc : Symbol(A.#fieldFunc, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 9))
>this : Symbol(A, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 0))

        func();
>func : Symbol(func, Decl(privateNameStaticAccessorsCallExpression.ts, 6, 13))

        new this.#fieldFunc();
>this.#fieldFunc : Symbol(A.#fieldFunc, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 9))
>this : Symbol(A, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 0))

        const arr = [ 1, 2 ];
>arr : Symbol(arr, Decl(privateNameStaticAccessorsCallExpression.ts, 10, 13))

        this.#fieldFunc2(0, ...arr, 3);
>this.#fieldFunc2 : Symbol(A.#fieldFunc2, Decl(privateNameStaticAccessorsCallExpression.ts, 1, 65))
>this : Symbol(A, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 0))
>arr : Symbol(arr, Decl(privateNameStaticAccessorsCallExpression.ts, 10, 13))

        const b = new this.#fieldFunc2(0, ...arr, 3);
>b : Symbol(b, Decl(privateNameStaticAccessorsCallExpression.ts, 12, 13))
>this.#fieldFunc2 : Symbol(A.#fieldFunc2, Decl(privateNameStaticAccessorsCallExpression.ts, 1, 65))
>this : Symbol(A, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 0))
>arr : Symbol(arr, Decl(privateNameStaticAccessorsCallExpression.ts, 10, 13))

        const str = this.#fieldFunc2`head${1}middle${2}tail`;
>str : Symbol(str, Decl(privateNameStaticAccessorsCallExpression.ts, 13, 13))
>this.#fieldFunc2 : Symbol(A.#fieldFunc2, Decl(privateNameStaticAccessorsCallExpression.ts, 1, 65))
>this : Symbol(A, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 0))

        this.getClass().#fieldFunc2`test${1}and${2}`;
>this.getClass().#fieldFunc2 : Symbol(A.#fieldFunc2, Decl(privateNameStaticAccessorsCallExpression.ts, 1, 65))
>this.getClass : Symbol(A.getClass, Decl(privateNameStaticAccessorsCallExpression.ts, 15, 5))
>this : Symbol(A, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 0))
>getClass : Symbol(A.getClass, Decl(privateNameStaticAccessorsCallExpression.ts, 15, 5))
    }
    static getClass() { return A; }
>getClass : Symbol(A.getClass, Decl(privateNameStaticAccessorsCallExpression.ts, 15, 5))
>A : Symbol(A, Decl(privateNameStaticAccessorsCallExpression.ts, 0, 0))
}
