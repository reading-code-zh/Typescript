=== tests/cases/compiler/index.ts ===

export * from './eventList';

=== tests/cases/compiler/test.ts ===
import { EventList } from "./eventList";
>EventList : Symbol(EventList, Decl(test.ts, 0, 8))

declare const p012: "p0" | "p1" | "p2"
>p012 : Symbol(p012, Decl(test.ts, 2, 13))

const t: keyof EventList = p012
>t : Symbol(t, Decl(test.ts, 3, 5))
>EventList : Symbol(EventList, Decl(test.ts, 0, 8))
>p012 : Symbol(p012, Decl(test.ts, 2, 13))

=== tests/cases/compiler/eventList.ts ===
export interface EventList {
>EventList : Symbol(EventList, Decl(eventList.ts, 0, 0), Decl(foo.ts, 0, 26), Decl(bar.ts, 0, 26))

    p0: [];
>p0 : Symbol(EventList.p0, Decl(eventList.ts, 0, 28))
}

=== tests/cases/compiler/foo.ts ===
declare module './index' {
>'./index' : Symbol("tests/cases/compiler/index", Decl(index.ts, 0, 0), Decl(foo.ts, 0, 0), Decl(bar.ts, 0, 0))

    interface EventList {
>EventList : Symbol(EventList, Decl(eventList.ts, 0, 0), Decl(foo.ts, 0, 26), Decl(bar.ts, 0, 26))

        p1: []
>p1 : Symbol(EventList.p1, Decl(foo.ts, 1, 25))
    }
}
export {};


=== tests/cases/compiler/bar.ts ===
declare module './index' {
>'./index' : Symbol("tests/cases/compiler/index", Decl(index.ts, 0, 0), Decl(foo.ts, 0, 0), Decl(bar.ts, 0, 0))

    interface EventList {
>EventList : Symbol(EventList, Decl(eventList.ts, 0, 0), Decl(foo.ts, 0, 26), Decl(bar.ts, 0, 26))

        p2: []
>p2 : Symbol(EventList.p2, Decl(bar.ts, 1, 25))
    }
}
export {};

