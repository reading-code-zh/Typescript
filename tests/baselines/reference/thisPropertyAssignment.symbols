=== tests/cases/conformance/salsa/a.js ===
// This test is asserting that a single property/element access
// on `this` is a special assignment declaration, but chaining
// off that does not create additional declarations. Iâ€™m not sure
// if it needs to be that way in JavaScript; the test simply
// ensures no accidental changes were introduced while allowing
// element access assignments to create declarations.

this.x = {};
>this.x : Symbol(x, Decl(a.js, 0, 0))
>this : Symbol(globalThis)
>x : Symbol(x, Decl(a.js, 0, 0))

this.x.y = {};
>this.x : Symbol(x, Decl(a.js, 0, 0))
>this : Symbol(globalThis)
>x : Symbol(x, Decl(a.js, 0, 0))

this["y"] = {};
>this : Symbol(globalThis)
>"y" : Symbol("y", Decl(a.js, 8, 14))

this["y"]["z"] = {};
>this : Symbol(globalThis)
>"y" : Symbol("y", Decl(a.js, 8, 14))

/** @constructor */
function F() {
>F : Symbol(F, Decl(a.js, 10, 20))

  this.a = {};
>this.a : Symbol(F.a, Decl(a.js, 13, 14))
>this : Symbol(F, Decl(a.js, 10, 20))
>a : Symbol(F.a, Decl(a.js, 13, 14))

  this.a.b = {};
>this.a : Symbol(F.a, Decl(a.js, 13, 14))
>this : Symbol(F, Decl(a.js, 10, 20))
>a : Symbol(F.a, Decl(a.js, 13, 14))

  this["b"] = {};
>this : Symbol(F, Decl(a.js, 10, 20))
>"b" : Symbol(F["b"], Decl(a.js, 15, 16))

  this["b"]["c"] = {};
>this : Symbol(F, Decl(a.js, 10, 20))
>"b" : Symbol(F["b"], Decl(a.js, 15, 16))
}

const f = new F();
>f : Symbol(f, Decl(a.js, 20, 5))
>F : Symbol(F, Decl(a.js, 10, 20))

f.a;
>f.a : Symbol(F.a, Decl(a.js, 13, 14))
>f : Symbol(f, Decl(a.js, 20, 5))
>a : Symbol(F.a, Decl(a.js, 13, 14))

f.b;
>f.b : Symbol(F["b"], Decl(a.js, 15, 16))
>f : Symbol(f, Decl(a.js, 20, 5))
>b : Symbol(F["b"], Decl(a.js, 15, 16))

