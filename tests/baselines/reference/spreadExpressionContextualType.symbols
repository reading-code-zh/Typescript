=== tests/cases/compiler/spreadExpressionContextualType.ts ===
// Repro from #43966

interface Orange {
>Orange : Symbol(Orange, Decl(spreadExpressionContextualType.ts, 0, 0))

    name: string;
>name : Symbol(Orange.name, Decl(spreadExpressionContextualType.ts, 2, 18))
}

interface Apple {
>Apple : Symbol(Apple, Decl(spreadExpressionContextualType.ts, 4, 1))

    name: string;
>name : Symbol(Apple.name, Decl(spreadExpressionContextualType.ts, 6, 17))
}

function test<T extends Apple | Orange>(item: T): T {
>test : Symbol(test, Decl(spreadExpressionContextualType.ts, 8, 1))
>T : Symbol(T, Decl(spreadExpressionContextualType.ts, 10, 14))
>Apple : Symbol(Apple, Decl(spreadExpressionContextualType.ts, 4, 1))
>Orange : Symbol(Orange, Decl(spreadExpressionContextualType.ts, 0, 0))
>item : Symbol(item, Decl(spreadExpressionContextualType.ts, 10, 40))
>T : Symbol(T, Decl(spreadExpressionContextualType.ts, 10, 14))
>T : Symbol(T, Decl(spreadExpressionContextualType.ts, 10, 14))

    return { ...item };
>item : Symbol(item, Decl(spreadExpressionContextualType.ts, 10, 40))
}

function test2<T extends Apple | Orange>(item: T): T {
>test2 : Symbol(test2, Decl(spreadExpressionContextualType.ts, 12, 1))
>T : Symbol(T, Decl(spreadExpressionContextualType.ts, 14, 15))
>Apple : Symbol(Apple, Decl(spreadExpressionContextualType.ts, 4, 1))
>Orange : Symbol(Orange, Decl(spreadExpressionContextualType.ts, 0, 0))
>item : Symbol(item, Decl(spreadExpressionContextualType.ts, 14, 41))
>T : Symbol(T, Decl(spreadExpressionContextualType.ts, 14, 15))
>T : Symbol(T, Decl(spreadExpressionContextualType.ts, 14, 15))

    const x = { ...item };
>x : Symbol(x, Decl(spreadExpressionContextualType.ts, 15, 9))
>item : Symbol(item, Decl(spreadExpressionContextualType.ts, 14, 41))

    return x;
>x : Symbol(x, Decl(spreadExpressionContextualType.ts, 15, 9))
}

