=== tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/fileJs.js ===
x ? y => ({ y }) : z => ({ z }) // Legal JS
>x ? y => ({ y }) : z => ({ z }) : ((y: any) => { y: any; }) | ((z: any) => { z: any; })
>x : any
>y => ({ y }) : (y: any) => { y: any; }
>y : any
>({ y }) : { y: any; }
>{ y } : { y: any; }
>y : any
>z => ({ z }) : (z: any) => { z: any; }
>z : any
>({ z }) : { z: any; }
>{ z } : { z: any; }
>z : any

=== tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/fileTs.ts ===
x ? y => ({ y }) : z => ({ z })
>x ? y => ({ y }) : z => ({ z }) : ((y: any) => { y: any; }) | ((z: any) => { z: any; })
>x : any
>y => ({ y }) : (y: any) => { y: any; }
>y : any
>({ y }) : { y: any; }
>{ y } : { y: any; }
>y : any
>z => ({ z }) : (z: any) => { z: any; }
>z : any
>({ z }) : { z: any; }
>{ z } : { z: any; }
>z : any

