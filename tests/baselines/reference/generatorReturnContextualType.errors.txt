tests/cases/conformance/generators/generatorReturnContextualType.ts(29,3): error TS2322: Type '{ x: string; }' is not assignable to type '{ x: "x"; }'.
  Types of property 'x' are incompatible.
    Type 'string' is not assignable to type '"x"'.
tests/cases/conformance/generators/generatorReturnContextualType.ts(34,3): error TS2322: Type '{ x: string; }' is not assignable to type '{ x: "x"; }'.
  Types of property 'x' are incompatible.
    Type 'string' is not assignable to type '"x"'.


==== tests/cases/conformance/generators/generatorReturnContextualType.ts (2 errors) ====
    // #35995
    
    function* f1(): Generator<any, { x: 'x' }, any> {
      return { x: 'x' };
    }
    
    function* g1(): Iterator<any, { x: 'x' }, any> {
      return { x: 'x' };
    }
    
    async function* f2(): AsyncGenerator<any, { x: 'x' }, any> {
      return { x: 'x' };
    }
    
    async function* g2(): AsyncIterator<any, { x: 'x' }, any> {
      return { x: 'x' };
    }
    
    async function* f3(): AsyncGenerator<any, { x: 'x' }, any> {
      return Promise.resolve({ x: 'x' });
    }
    
    async function* g3(): AsyncIterator<any, { x: 'x' }, any> {
      return Promise.resolve({ x: 'x' });
    }
    
    async function* f4(): AsyncGenerator<any, { x: 'x' }, any> {
      const ret = { x: 'x' };
      return Promise.resolve(ret); // Error
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '{ x: string; }' is not assignable to type '{ x: "x"; }'.
!!! error TS2322:   Types of property 'x' are incompatible.
!!! error TS2322:     Type 'string' is not assignable to type '"x"'.
    }
    
    async function* g4(): AsyncIterator<any, { x: 'x' }, any> {
      const ret = { x: 'x' };
      return Promise.resolve(ret); // Error
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!! error TS2322: Type '{ x: string; }' is not assignable to type '{ x: "x"; }'.
!!! error TS2322:   Types of property 'x' are incompatible.
!!! error TS2322:     Type 'string' is not assignable to type '"x"'.
    }
    