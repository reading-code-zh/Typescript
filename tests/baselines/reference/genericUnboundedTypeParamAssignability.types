=== tests/cases/compiler/genericUnboundedTypeParamAssignability.ts ===
function f1<T>(o: T) {
>f1 : <T>(o: T) => void
>o : T

  o.toString(); // error
>o.toString() : any
>o.toString : any
>o : T
>toString : any
}

function f2<T extends {}>(o: T) {
>f2 : <T extends {}>(o: T) => void
>o : T

  o.toString(); // no error
>o.toString() : string
>o.toString : () => string
>o : T
>toString : () => string
}

function f3<T extends Record<string, any>>(o: T) {
>f3 : <T extends Record<string, any>>(o: T) => void
>o : T

  o.toString(); // no error
>o.toString() : string
>o.toString : () => string
>o : T
>toString : () => string
}

function user<T>(t: T) {
>user : <T>(t: T) => void
>t : T

  f1(t);
>f1(t) : void
>f1 : <T>(o: T) => void
>t : T

  f2(t); // error in strict, unbounded T doesn't satisfy the constraint
>f2(t) : void
>f2 : <T extends {}>(o: T) => void
>t : T

  f3(t); // error in strict, unbounded T doesn't satisfy the constraint
>f3(t) : void
>f3 : <T extends Record<string, any>>(o: T) => void
>t : T

  t.toString();  // error, for the same reason as f1()
>t.toString() : any
>t.toString : any
>t : T
>toString : any
}

