=== tests/cases/compiler/divergentAccessors1.ts ===
// Accessors in interfaces/types

{
    interface IHasGetSet {
>IHasGetSet : Symbol(IHasGetSet, Decl(divergentAccessors1.ts, 2, 1))

        get foo(): number;
>foo : Symbol(IHasGetSet.foo, Decl(divergentAccessors1.ts, 3, 26), Decl(divergentAccessors1.ts, 4, 26))

        set foo(v: number | string);
>foo : Symbol(IHasGetSet.foo, Decl(divergentAccessors1.ts, 3, 26), Decl(divergentAccessors1.ts, 4, 26))
>v : Symbol(v, Decl(divergentAccessors1.ts, 5, 16))
    }
    
    const ihgs: IHasGetSet = null as any;
>ihgs : Symbol(ihgs, Decl(divergentAccessors1.ts, 8, 9))
>IHasGetSet : Symbol(IHasGetSet, Decl(divergentAccessors1.ts, 2, 1))

    ihgs.foo = "32";
>ihgs.foo : Symbol(IHasGetSet.foo, Decl(divergentAccessors1.ts, 3, 26), Decl(divergentAccessors1.ts, 4, 26))
>ihgs : Symbol(ihgs, Decl(divergentAccessors1.ts, 8, 9))
>foo : Symbol(IHasGetSet.foo, Decl(divergentAccessors1.ts, 3, 26), Decl(divergentAccessors1.ts, 4, 26))

    let r_ihgs_foo: number = ihgs.foo;
>r_ihgs_foo : Symbol(r_ihgs_foo, Decl(divergentAccessors1.ts, 10, 7))
>ihgs.foo : Symbol(IHasGetSet.foo, Decl(divergentAccessors1.ts, 3, 26), Decl(divergentAccessors1.ts, 4, 26))
>ihgs : Symbol(ihgs, Decl(divergentAccessors1.ts, 8, 9))
>foo : Symbol(IHasGetSet.foo, Decl(divergentAccessors1.ts, 3, 26), Decl(divergentAccessors1.ts, 4, 26))
}

{
    type T_HasGetSet = {
>T_HasGetSet : Symbol(T_HasGetSet, Decl(divergentAccessors1.ts, 13, 1))

        get foo(): number;
>foo : Symbol(foo, Decl(divergentAccessors1.ts, 14, 24), Decl(divergentAccessors1.ts, 15, 26))

        set foo(v: number | string);
>foo : Symbol(foo, Decl(divergentAccessors1.ts, 14, 24), Decl(divergentAccessors1.ts, 15, 26))
>v : Symbol(v, Decl(divergentAccessors1.ts, 16, 16))
    }
    
    const t_hgs: T_HasGetSet = null as any;
>t_hgs : Symbol(t_hgs, Decl(divergentAccessors1.ts, 19, 9))
>T_HasGetSet : Symbol(T_HasGetSet, Decl(divergentAccessors1.ts, 13, 1))

    t_hgs.foo = "32";
>t_hgs.foo : Symbol(foo, Decl(divergentAccessors1.ts, 14, 24), Decl(divergentAccessors1.ts, 15, 26))
>t_hgs : Symbol(t_hgs, Decl(divergentAccessors1.ts, 19, 9))
>foo : Symbol(foo, Decl(divergentAccessors1.ts, 14, 24), Decl(divergentAccessors1.ts, 15, 26))

    let r_t_hgs_foo: number = t_hgs.foo;
>r_t_hgs_foo : Symbol(r_t_hgs_foo, Decl(divergentAccessors1.ts, 21, 7))
>t_hgs.foo : Symbol(foo, Decl(divergentAccessors1.ts, 14, 24), Decl(divergentAccessors1.ts, 15, 26))
>t_hgs : Symbol(t_hgs, Decl(divergentAccessors1.ts, 19, 9))
>foo : Symbol(foo, Decl(divergentAccessors1.ts, 14, 24), Decl(divergentAccessors1.ts, 15, 26))
}

