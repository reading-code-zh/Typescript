=== tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty5.ts ===
const a: { key?: { x?: number } } = {};
>a : Symbol(a, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 0, 5))
>key : Symbol(key, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 0, 10))
>x : Symbol(x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 0, 18))

const aIndex = "key";
>aIndex : Symbol(aIndex, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 1, 5))

if (a[aIndex] && a[aIndex].x) {
>a : Symbol(a, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 0, 5))
>aIndex : Symbol(aIndex, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 1, 5))
>a[aIndex].x : Symbol(x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 0, 18))
>a : Symbol(a, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 0, 5))
>aIndex : Symbol(aIndex, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 1, 5))
>x : Symbol(x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 0, 18))

    a[aIndex].x // number
>a[aIndex].x : Symbol(x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 0, 18))
>a : Symbol(a, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 0, 5))
>aIndex : Symbol(aIndex, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 1, 5))
>x : Symbol(x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 0, 18))
}

const b: { key: { x?: number } } = { key: {} };
>b : Symbol(b, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 6, 5))
>key : Symbol(key, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 6, 10))
>x : Symbol(x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 6, 17))
>key : Symbol(key, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 6, 36))

const bIndex = "key";
>bIndex : Symbol(bIndex, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 7, 5))

if (b[bIndex].x) {
>b[bIndex].x : Symbol(x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 6, 17))
>b : Symbol(b, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 6, 5))
>bIndex : Symbol(bIndex, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 7, 5))
>x : Symbol(x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 6, 17))

    b[bIndex].x // number
>b[bIndex].x : Symbol(x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 6, 17))
>b : Symbol(b, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 6, 5))
>bIndex : Symbol(bIndex, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 7, 5))
>x : Symbol(x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 6, 17))
}

interface Foo {
>Foo : Symbol(Foo, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 10, 1))

    x: number | undefined;
>x : Symbol(Foo.x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 12, 15))
}
const c: Foo[] = [];
>c : Symbol(c, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 15, 5))
>Foo : Symbol(Foo, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 10, 1))

const cIndex = 1;
>cIndex : Symbol(cIndex, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 16, 5))

if (c[cIndex].x) {
>c[cIndex].x : Symbol(Foo.x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 12, 15))
>c : Symbol(c, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 15, 5))
>cIndex : Symbol(cIndex, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 16, 5))
>x : Symbol(Foo.x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 12, 15))

    c[cIndex].x // number
>c[cIndex].x : Symbol(Foo.x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 12, 15))
>c : Symbol(c, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 15, 5))
>cIndex : Symbol(cIndex, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 16, 5))
>x : Symbol(Foo.x, Decl(typeGuardNarrowsIndexedAccessOfKnownProperty5.ts, 12, 15))
}

