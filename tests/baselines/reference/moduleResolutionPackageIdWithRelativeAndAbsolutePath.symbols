=== /project/src/app.ts ===
import * as t from "anotherLib"; // Include the lib that recursively includes option as relative module resolution in this directory
>t : Symbol(t, Decl(app.ts, 0, 6))

import { makeSharedOption } from "@shared/lib/app"; // Includes option as module in shared folder but as module in node_modules folder
>makeSharedOption : Symbol(makeSharedOption, Decl(app.ts, 1, 8))

=== /shared/node_modules/troublesome-lib/lib/Option.d.ts ===
export class Option {
>Option : Symbol(Option, Decl(Option.d.ts, 0, 0))

    someProperty: string;
>someProperty : Symbol(Option.someProperty, Decl(Option.d.ts, 0, 21))
}
=== /shared/lib/app.d.ts ===
import { Option } from "troublesome-lib/lib/Option";
>Option : Symbol(Option, Decl(app.d.ts, 0, 8))

export class SharedOption extends Option { }
>SharedOption : Symbol(SharedOption, Decl(app.d.ts, 0, 52))
>Option : Symbol(Option, Decl(app.d.ts, 0, 8))

export const makeSharedOption: () => SharedOption;
>makeSharedOption : Symbol(makeSharedOption, Decl(app.d.ts, 2, 12))
>SharedOption : Symbol(SharedOption, Decl(app.d.ts, 0, 52))

=== /project/node_modules/anotherLib/index.d.ts ===
import { Compactable } from "troublesome-lib/lib/Compactable"; // Including this will resolve Option as relative through the imports of compactable
>Compactable : Symbol(Compactable, Decl(index.d.ts, 0, 8))

=== /project/node_modules/troublesome-lib/lib/Compactable.d.ts ===
import { Option } from './Option';
>Option : Symbol(Option, Decl(Compactable.d.ts, 0, 8))

export class Compactable {
>Compactable : Symbol(Compactable, Decl(Compactable.d.ts, 0, 34))

    option: Option;
>option : Symbol(Compactable.option, Decl(Compactable.d.ts, 1, 26))
>Option : Symbol(Option, Decl(Compactable.d.ts, 0, 8))
}
=== /project/node_modules/troublesome-lib/lib/Option.d.ts ===
export class Option {
>Option : Symbol(Option, Decl(Option.d.ts, 0, 0))

    someProperty: string;
>someProperty : Symbol(Option.someProperty, Decl(Option.d.ts, 0, 21))
}
