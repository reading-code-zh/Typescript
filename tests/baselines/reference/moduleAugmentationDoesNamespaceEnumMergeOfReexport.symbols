=== tests/cases/compiler/file.ts ===
export namespace Root {
>Root : Symbol(Root, Decl(file.ts, 0, 0), Decl(augment.ts, 2, 29))

    // type-only NS
    export interface Foo {
>Foo : Symbol(Foo, Decl(file.ts, 0, 23))

        x: number;
>x : Symbol(Foo.x, Decl(file.ts, 2, 26))
    }
}
=== tests/cases/compiler/reexport.ts ===

export * from "./file";
=== tests/cases/compiler/augment.ts ===
import * as ns from "./reexport";
>ns : Symbol(ns, Decl(augment.ts, 0, 6))

declare module "./reexport" {
>"./reexport" : Symbol(ns, Decl(reexport.ts, 0, 0), Decl(augment.ts, 0, 33))

    // Merging an enum into a type-only NS is OK
    export enum Root {
>Root : Symbol(Root, Decl(file.ts, 0, 0), Decl(augment.ts, 2, 29))

        A,
>A : Symbol(Root.A, Decl(augment.ts, 4, 22))

        B,
>B : Symbol(Root.B, Decl(augment.ts, 5, 10))

        C
>C : Symbol(Root.C, Decl(augment.ts, 6, 10))
    }
}

declare const f: ns.Root.Foo;
>f : Symbol(f, Decl(augment.ts, 11, 13))
>ns : Symbol(ns, Decl(augment.ts, 0, 6))
>Root : Symbol(ns.Root, Decl(file.ts, 0, 0), Decl(augment.ts, 2, 29))
>Foo : Symbol(ns.Root.Foo, Decl(file.ts, 0, 23))

const g: ns.Root = ns.Root.A;
>g : Symbol(g, Decl(augment.ts, 12, 5))
>ns : Symbol(ns, Decl(augment.ts, 0, 6))
>Root : Symbol(ns.Root, Decl(file.ts, 0, 0), Decl(augment.ts, 2, 29))
>ns.Root.A : Symbol(ns.Root.A, Decl(augment.ts, 4, 22))
>ns.Root : Symbol(ns.Root, Decl(file.ts, 0, 0), Decl(augment.ts, 2, 29))
>ns : Symbol(ns, Decl(augment.ts, 0, 6))
>Root : Symbol(ns.Root, Decl(file.ts, 0, 0), Decl(augment.ts, 2, 29))
>A : Symbol(ns.Root.A, Decl(augment.ts, 4, 22))

f.x;
>f.x : Symbol(ns.Root.Foo.x, Decl(file.ts, 2, 26))
>f : Symbol(f, Decl(augment.ts, 11, 13))
>x : Symbol(ns.Root.Foo.x, Decl(file.ts, 2, 26))

