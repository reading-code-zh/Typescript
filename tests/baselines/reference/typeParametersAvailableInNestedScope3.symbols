=== tests/cases/conformance/types/typeParameters/typeParameterLists/typeParametersAvailableInNestedScope3.ts ===
function foo<T>(v: T) {
>foo : Symbol(foo, Decl(typeParametersAvailableInNestedScope3.ts, 0, 0))
>T : Symbol(T, Decl(typeParametersAvailableInNestedScope3.ts, 0, 13))
>v : Symbol(v, Decl(typeParametersAvailableInNestedScope3.ts, 0, 16))
>T : Symbol(T, Decl(typeParametersAvailableInNestedScope3.ts, 0, 13))

    function a<T>(a: T) { return a; }
>a : Symbol(a, Decl(typeParametersAvailableInNestedScope3.ts, 0, 23))
>T : Symbol(T, Decl(typeParametersAvailableInNestedScope3.ts, 1, 15))
>a : Symbol(a, Decl(typeParametersAvailableInNestedScope3.ts, 1, 18))
>T : Symbol(T, Decl(typeParametersAvailableInNestedScope3.ts, 1, 15))
>a : Symbol(a, Decl(typeParametersAvailableInNestedScope3.ts, 1, 18))

    function b(): T { return v; }
>b : Symbol(b, Decl(typeParametersAvailableInNestedScope3.ts, 1, 37))
>T : Symbol(T, Decl(typeParametersAvailableInNestedScope3.ts, 0, 13))
>v : Symbol(v, Decl(typeParametersAvailableInNestedScope3.ts, 0, 16))

    function c<T>(v: T) {
>c : Symbol(c, Decl(typeParametersAvailableInNestedScope3.ts, 2, 33))
>T : Symbol(T, Decl(typeParametersAvailableInNestedScope3.ts, 4, 15))
>v : Symbol(v, Decl(typeParametersAvailableInNestedScope3.ts, 4, 18))
>T : Symbol(T, Decl(typeParametersAvailableInNestedScope3.ts, 4, 15))

        function a<T>(a: T) { return a; }
>a : Symbol(a, Decl(typeParametersAvailableInNestedScope3.ts, 4, 25))
>T : Symbol(T, Decl(typeParametersAvailableInNestedScope3.ts, 5, 19))
>a : Symbol(a, Decl(typeParametersAvailableInNestedScope3.ts, 5, 22))
>T : Symbol(T, Decl(typeParametersAvailableInNestedScope3.ts, 5, 19))
>a : Symbol(a, Decl(typeParametersAvailableInNestedScope3.ts, 5, 22))

        function b(): T { return v; }
>b : Symbol(b, Decl(typeParametersAvailableInNestedScope3.ts, 5, 41))
>T : Symbol(T, Decl(typeParametersAvailableInNestedScope3.ts, 4, 15))
>v : Symbol(v, Decl(typeParametersAvailableInNestedScope3.ts, 4, 18))

        return { a, b };
>a : Symbol(a, Decl(typeParametersAvailableInNestedScope3.ts, 7, 16))
>b : Symbol(b, Decl(typeParametersAvailableInNestedScope3.ts, 7, 19))
    }

    return { a, b, c };
>a : Symbol(a, Decl(typeParametersAvailableInNestedScope3.ts, 10, 12))
>b : Symbol(b, Decl(typeParametersAvailableInNestedScope3.ts, 10, 15))
>c : Symbol(c, Decl(typeParametersAvailableInNestedScope3.ts, 10, 18))
}

