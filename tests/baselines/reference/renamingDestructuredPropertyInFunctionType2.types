=== tests/cases/compiler/a.d.ts ===
type O = { a: string; b: number; c: number; };
>O : { a: string; b: number; c: number; }
>a : string
>b : number
>c : number

type F1 = (arg: number) => any; 
>F1 : (arg: number) => any
>arg : number

type F2 = ({ a: string }: O) => any; 
>F2 : ({ a: string }: O) => any
>a : any
>string : string

type F3 = ({ a: string, b, c }: O) => any; 
>F3 : ({ a: string, b, c }: O) => any
>a : any
>string : string
>b : number
>c : number

type F4 = ({ a: string }: O) => any; 
>F4 : ({ a: string }: O) => any
>a : any
>string : string

type F5 = ({ a: string, b, c }: O) => any; 
>F5 : ({ a: string, b, c }: O) => any
>a : any
>string : string
>b : number
>c : number

type F6 = ({ a: string }) => typeof string; 
>F6 : ({ a: string }: { a: any; }) => any
>a : any
>string : any
>string : any

type F7 = ({ a: string, b: number }) => typeof number; 
>F7 : ({ a: string, b: number }: { a: any; b: any; }) => any
>a : any
>string : any
>b : any
>number : any
>number : any

type F8 = ({ a, b: number }) => typeof number; 
>F8 : ({ a, b: number }: { a: any; b: any; }) => any
>a : any
>b : any
>number : any
>number : any

type F9 = ([a, b, c]) => void; 
>F9 : ([a, b, c]: [any, any, any]) => void
>a : any
>b : any
>c : any

type G1 = (arg: number) => any; 
>G1 : (arg: number) => any
>arg : number

type G2 = ({ a: string }: O) => any; 
>G2 : ({ a: string }: O) => any
>a : any
>string : string

type G3 = ({ a: string, b, c }: O) => any; 
>G3 : ({ a: string, b, c }: O) => any
>a : any
>string : string
>b : number
>c : number

type G4 = ({ a: string }: O) => any; 
>G4 : ({ a: string }: O) => any
>a : any
>string : string

type G5 = ({ a: string, b, c }: O) => any; 
>G5 : ({ a: string, b, c }: O) => any
>a : any
>string : string
>b : number
>c : number

type G6 = ({ a: string }) => typeof string; 
>G6 : ({ a: string }: { a: any; }) => any
>a : any
>string : any
>string : any

type G7 = ({ a: string, b: number }) => typeof number; 
>G7 : ({ a: string, b: number }: { a: any; b: any; }) => any
>a : any
>string : any
>b : any
>number : any
>number : any

type G8 = ({ a, b: number }) => typeof number; 
>G8 : ({ a, b: number }: { a: any; b: any; }) => any
>a : any
>b : any
>number : any
>number : any

type G9 = ([a, b, c]) => void; 
>G9 : ([a, b, c]: [any, any, any]) => void
>a : any
>b : any
>c : any

interface I {
  method1(arg: number): any; 
>method1 : (arg: number) => any
>arg : number

  method2({ a: string }): any; 
>method2 : ({ a: string }: { a: any; }) => any
>a : any
>string : any

  (arg: number): any; 
>arg : number

  ({ a: string }): any; 
>a : any
>string : any

  new (arg: number): any; 
>arg : number

  new ({ a: string }): any; 
>a : any
>string : any
}


