=== tests/cases/compiler/exhaustiveSwitchCheckCircularity.ts ===
// Repro from #47539

declare function isNever(n: never): boolean;
>isNever : (n: never) => boolean
>n : never

function f() {
>f : () => void

    let foo: "aaa" | "bbb" = "aaa";
>foo : "aaa" | "bbb"
>"aaa" : "aaa"

    while (true) {
>true : true

        switch (foo) {
>foo : "aaa" | "bbb"

            case "aaa":
>"aaa" : "aaa"
        }
        if (foo === "aaa") {
>foo === "aaa" : boolean
>foo : "aaa" | "bbb"
>"aaa" : "aaa"

            foo = "bbb";
>foo = "bbb" : "bbb"
>foo : "aaa" | "bbb"
>"bbb" : "bbb"
        }
        else if (isNever(foo)) {  // Error expected
>isNever(foo) : boolean
>isNever : (n: never) => boolean
>foo : "bbb"

            break;
        }
    }
}

