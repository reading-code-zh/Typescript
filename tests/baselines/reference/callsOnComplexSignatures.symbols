=== tests/cases/compiler/callsOnComplexSignatures.tsx ===
/// <reference path="react16.d.ts" />
import React from "react";
>React : Symbol(React, Decl(callsOnComplexSignatures.tsx, 1, 6))

// Simple calls from real usecases
function test1() {
>test1 : Symbol(test1, Decl(callsOnComplexSignatures.tsx, 1, 26))

    type stringType1 = "foo" | "bar";
>stringType1 : Symbol(stringType1, Decl(callsOnComplexSignatures.tsx, 4, 18))

    type stringType2 = "baz" | "bar";
>stringType2 : Symbol(stringType2, Decl(callsOnComplexSignatures.tsx, 5, 37))

    interface Temp1 {
>Temp1 : Symbol(Temp1, Decl(callsOnComplexSignatures.tsx, 6, 37))

        getValue(name: stringType1): number;
>getValue : Symbol(Temp1.getValue, Decl(callsOnComplexSignatures.tsx, 8, 21))
>name : Symbol(name, Decl(callsOnComplexSignatures.tsx, 9, 17))
>stringType1 : Symbol(stringType1, Decl(callsOnComplexSignatures.tsx, 4, 18))
    }

    interface Temp2 {
>Temp2 : Symbol(Temp2, Decl(callsOnComplexSignatures.tsx, 10, 5))

        getValue(name: stringType2): string;
>getValue : Symbol(Temp2.getValue, Decl(callsOnComplexSignatures.tsx, 12, 21))
>name : Symbol(name, Decl(callsOnComplexSignatures.tsx, 13, 17))
>stringType2 : Symbol(stringType2, Decl(callsOnComplexSignatures.tsx, 5, 37))
    }

    function test(t: Temp1 | Temp2) {
>test : Symbol(test, Decl(callsOnComplexSignatures.tsx, 14, 5))
>t : Symbol(t, Decl(callsOnComplexSignatures.tsx, 16, 18))
>Temp1 : Symbol(Temp1, Decl(callsOnComplexSignatures.tsx, 6, 37))
>Temp2 : Symbol(Temp2, Decl(callsOnComplexSignatures.tsx, 10, 5))

        const z = t.getValue("bar"); // Should be fine
>z : Symbol(z, Decl(callsOnComplexSignatures.tsx, 17, 13))
>t.getValue : Symbol(getValue, Decl(callsOnComplexSignatures.tsx, 8, 21), Decl(callsOnComplexSignatures.tsx, 12, 21))
>t : Symbol(t, Decl(callsOnComplexSignatures.tsx, 16, 18))
>getValue : Symbol(getValue, Decl(callsOnComplexSignatures.tsx, 8, 21), Decl(callsOnComplexSignatures.tsx, 12, 21))
    }
}

function test2() {
>test2 : Symbol(test2, Decl(callsOnComplexSignatures.tsx, 19, 1))

    interface Messages {
>Messages : Symbol(Messages, Decl(callsOnComplexSignatures.tsx, 21, 18))

        readonly foo: (options: { [key: string]: any, b: number }) => string;
>foo : Symbol(Messages.foo, Decl(callsOnComplexSignatures.tsx, 22, 24))
>options : Symbol(options, Decl(callsOnComplexSignatures.tsx, 23, 23))
>key : Symbol(key, Decl(callsOnComplexSignatures.tsx, 23, 35))
>b : Symbol(b, Decl(callsOnComplexSignatures.tsx, 23, 53))

        readonly bar: (options: { [key: string]: any, a: string }) => string;
>bar : Symbol(Messages.bar, Decl(callsOnComplexSignatures.tsx, 23, 77))
>options : Symbol(options, Decl(callsOnComplexSignatures.tsx, 24, 23))
>key : Symbol(key, Decl(callsOnComplexSignatures.tsx, 24, 35))
>a : Symbol(a, Decl(callsOnComplexSignatures.tsx, 24, 53))
    }

    const messages: Messages = {
>messages : Symbol(messages, Decl(callsOnComplexSignatures.tsx, 27, 9))
>Messages : Symbol(Messages, Decl(callsOnComplexSignatures.tsx, 21, 18))

        foo: (options) => "Foo",
>foo : Symbol(foo, Decl(callsOnComplexSignatures.tsx, 27, 32))
>options : Symbol(options, Decl(callsOnComplexSignatures.tsx, 28, 14))

        bar: (options) => "Bar",
>bar : Symbol(bar, Decl(callsOnComplexSignatures.tsx, 28, 32))
>options : Symbol(options, Decl(callsOnComplexSignatures.tsx, 29, 14))

    };

    const test1 = (type: "foo" | "bar") =>
>test1 : Symbol(test1, Decl(callsOnComplexSignatures.tsx, 32, 9))
>type : Symbol(type, Decl(callsOnComplexSignatures.tsx, 32, 19))

        messages[type]({ a: "A", b: 0 });
>messages : Symbol(messages, Decl(callsOnComplexSignatures.tsx, 27, 9))
>type : Symbol(type, Decl(callsOnComplexSignatures.tsx, 32, 19))
>a : Symbol(a, Decl(callsOnComplexSignatures.tsx, 33, 24))
>b : Symbol(b, Decl(callsOnComplexSignatures.tsx, 33, 32))
}

function test3(items: string[] | number[]) {
>test3 : Symbol(test3, Decl(callsOnComplexSignatures.tsx, 34, 1))
>items : Symbol(items, Decl(callsOnComplexSignatures.tsx, 36, 15))

    items.forEach(item => console.log(item));
>items.forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>items : Symbol(items, Decl(callsOnComplexSignatures.tsx, 36, 15))
>forEach : Symbol(Array.forEach, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>item : Symbol(item, Decl(callsOnComplexSignatures.tsx, 37, 18))
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>item : Symbol(item, Decl(callsOnComplexSignatures.tsx, 37, 18))
}

function test4(
>test4 : Symbol(test4, Decl(callsOnComplexSignatures.tsx, 38, 1))

    arg1: ((...objs: {x: number}[]) => number) | ((...objs: {y: number}[]) => number),
>arg1 : Symbol(arg1, Decl(callsOnComplexSignatures.tsx, 40, 15))
>objs : Symbol(objs, Decl(callsOnComplexSignatures.tsx, 41, 12))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 41, 22))
>objs : Symbol(objs, Decl(callsOnComplexSignatures.tsx, 41, 51))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 41, 61))

    arg2: ((a: {x: number}, b: object) => number) | ((a: object, b: {x: number}) => number),
>arg2 : Symbol(arg2, Decl(callsOnComplexSignatures.tsx, 41, 86))
>a : Symbol(a, Decl(callsOnComplexSignatures.tsx, 42, 12))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 42, 16))
>b : Symbol(b, Decl(callsOnComplexSignatures.tsx, 42, 27))
>a : Symbol(a, Decl(callsOnComplexSignatures.tsx, 42, 54))
>b : Symbol(b, Decl(callsOnComplexSignatures.tsx, 42, 64))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 42, 69))

    arg3: ((a: {x: number}, ...objs: {y: number}[]) => number) | ((...objs: {x: number}[]) => number),
>arg3 : Symbol(arg3, Decl(callsOnComplexSignatures.tsx, 42, 92))
>a : Symbol(a, Decl(callsOnComplexSignatures.tsx, 43, 12))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 43, 16))
>objs : Symbol(objs, Decl(callsOnComplexSignatures.tsx, 43, 27))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 43, 38))
>objs : Symbol(objs, Decl(callsOnComplexSignatures.tsx, 43, 67))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 43, 77))

    arg4: ((a?: {x: number}, b?: {x: number}) => number) | ((a?: {y: number}) => number),
>arg4 : Symbol(arg4, Decl(callsOnComplexSignatures.tsx, 43, 102))
>a : Symbol(a, Decl(callsOnComplexSignatures.tsx, 44, 12))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 44, 17))
>b : Symbol(b, Decl(callsOnComplexSignatures.tsx, 44, 28))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 44, 34))
>a : Symbol(a, Decl(callsOnComplexSignatures.tsx, 44, 61))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 44, 66))

    arg5: ((a?: {x: number}, ...b: {x: number}[]) => number) | ((a?: {y: number}) => number),
>arg5 : Symbol(arg5, Decl(callsOnComplexSignatures.tsx, 44, 89))
>a : Symbol(a, Decl(callsOnComplexSignatures.tsx, 45, 12))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 45, 17))
>b : Symbol(b, Decl(callsOnComplexSignatures.tsx, 45, 28))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 45, 36))
>a : Symbol(a, Decl(callsOnComplexSignatures.tsx, 45, 65))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 45, 70))

    arg6: ((a?: {x: number}, b?: {x: number}) => number) | ((...a: {y: number}[]) => number),
>arg6 : Symbol(arg6, Decl(callsOnComplexSignatures.tsx, 45, 93))
>a : Symbol(a, Decl(callsOnComplexSignatures.tsx, 46, 12))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 46, 17))
>b : Symbol(b, Decl(callsOnComplexSignatures.tsx, 46, 28))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 46, 34))
>a : Symbol(a, Decl(callsOnComplexSignatures.tsx, 46, 61))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 46, 68))

) {
    arg1();
>arg1 : Symbol(arg1, Decl(callsOnComplexSignatures.tsx, 40, 15))

    arg1({x: 0, y: 0});
>arg1 : Symbol(arg1, Decl(callsOnComplexSignatures.tsx, 40, 15))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 49, 10))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 49, 15))

    arg1({x: 0, y: 0}, {x: 1, y: 1});
>arg1 : Symbol(arg1, Decl(callsOnComplexSignatures.tsx, 40, 15))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 50, 10))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 50, 15))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 50, 24))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 50, 29))

    arg2({x: 0}, {x: 0});
>arg2 : Symbol(arg2, Decl(callsOnComplexSignatures.tsx, 41, 86))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 52, 10))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 52, 18))

    arg3({x: 0});
>arg3 : Symbol(arg3, Decl(callsOnComplexSignatures.tsx, 42, 92))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 54, 10))

    arg3({x: 0}, {x: 0, y: 0});
>arg3 : Symbol(arg3, Decl(callsOnComplexSignatures.tsx, 42, 92))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 55, 10))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 55, 18))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 55, 23))

    arg3({x: 0}, {x: 0, y: 0}, {x: 0, y: 0});
>arg3 : Symbol(arg3, Decl(callsOnComplexSignatures.tsx, 42, 92))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 56, 10))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 56, 18))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 56, 23))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 56, 32))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 56, 37))

    arg4();
>arg4 : Symbol(arg4, Decl(callsOnComplexSignatures.tsx, 43, 102))

    arg4({x: 0, y: 0});
>arg4 : Symbol(arg4, Decl(callsOnComplexSignatures.tsx, 43, 102))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 59, 10))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 59, 15))

    arg4({x: 0, y: 0}, {x: 0});
>arg4 : Symbol(arg4, Decl(callsOnComplexSignatures.tsx, 43, 102))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 60, 10))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 60, 15))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 60, 24))

    arg5();
>arg5 : Symbol(arg5, Decl(callsOnComplexSignatures.tsx, 44, 89))

    arg5({x: 0, y: 0});
>arg5 : Symbol(arg5, Decl(callsOnComplexSignatures.tsx, 44, 89))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 63, 10))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 63, 15))

    arg5({x: 0, y: 0}, {x: 0});
>arg5 : Symbol(arg5, Decl(callsOnComplexSignatures.tsx, 44, 89))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 64, 10))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 64, 15))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 64, 24))

    arg6();
>arg6 : Symbol(arg6, Decl(callsOnComplexSignatures.tsx, 45, 93))

    arg6({x: 0, y: 0});
>arg6 : Symbol(arg6, Decl(callsOnComplexSignatures.tsx, 45, 93))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 67, 10))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 67, 15))

    arg6({x: 0, y: 0}, {x: 0, y: 0});
>arg6 : Symbol(arg6, Decl(callsOnComplexSignatures.tsx, 45, 93))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 68, 10))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 68, 15))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 68, 24))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 68, 29))

    arg6({x: 0, y: 0}, {x: 0, y: 0}, {y: 0});
>arg6 : Symbol(arg6, Decl(callsOnComplexSignatures.tsx, 45, 93))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 69, 10))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 69, 15))
>x : Symbol(x, Decl(callsOnComplexSignatures.tsx, 69, 24))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 69, 29))
>y : Symbol(y, Decl(callsOnComplexSignatures.tsx, 69, 38))
}

// JSX Tag names
function test5() {
>test5 : Symbol(test5, Decl(callsOnComplexSignatures.tsx, 70, 1))

    // Pair of non-like intrinsics
    function render(url?: string): React.ReactNode {
>render : Symbol(render, Decl(callsOnComplexSignatures.tsx, 73, 18))
>url : Symbol(url, Decl(callsOnComplexSignatures.tsx, 75, 20))
>React : Symbol(React, Decl(callsOnComplexSignatures.tsx, 1, 6))
>ReactNode : Symbol(React.ReactNode, Decl(react16.d.ts, 216, 49))

        const Tag = url ? 'a' : 'button';
>Tag : Symbol(Tag, Decl(callsOnComplexSignatures.tsx, 76, 13))
>url : Symbol(url, Decl(callsOnComplexSignatures.tsx, 75, 20))

        return <Tag>test</Tag>;
>Tag : Symbol(Tag, Decl(callsOnComplexSignatures.tsx, 76, 13))
>Tag : Symbol(Tag, Decl(callsOnComplexSignatures.tsx, 76, 13))
    }

    // Union of all intrinsics and components of `any`
    function App(props: { component:React.ReactType }) {
>App : Symbol(App, Decl(callsOnComplexSignatures.tsx, 78, 5))
>props : Symbol(props, Decl(callsOnComplexSignatures.tsx, 81, 17))
>component : Symbol(component, Decl(callsOnComplexSignatures.tsx, 81, 25))
>React : Symbol(React, Decl(callsOnComplexSignatures.tsx, 1, 6))
>ReactType : Symbol(React.ReactType, Decl(react16.d.ts, 112, 21))

        const Comp: React.ReactType = props.component;
>Comp : Symbol(Comp, Decl(callsOnComplexSignatures.tsx, 82, 13))
>React : Symbol(React, Decl(callsOnComplexSignatures.tsx, 1, 6))
>ReactType : Symbol(React.ReactType, Decl(react16.d.ts, 112, 21))
>props.component : Symbol(component, Decl(callsOnComplexSignatures.tsx, 81, 25))
>props : Symbol(props, Decl(callsOnComplexSignatures.tsx, 81, 17))
>component : Symbol(component, Decl(callsOnComplexSignatures.tsx, 81, 25))

        return (<Comp />);
>Comp : Symbol(Comp, Decl(callsOnComplexSignatures.tsx, 82, 13))
    }

    // custom components with non-subset props
    function render2() {
>render2 : Symbol(render2, Decl(callsOnComplexSignatures.tsx, 84, 5))

        interface P1 {
>P1 : Symbol(P1, Decl(callsOnComplexSignatures.tsx, 87, 24))

            p?: boolean;
>p : Symbol(P1.p, Decl(callsOnComplexSignatures.tsx, 88, 22))

            c?: string;
>c : Symbol(P1.c, Decl(callsOnComplexSignatures.tsx, 89, 24))
        }
        interface P2 {
>P2 : Symbol(P2, Decl(callsOnComplexSignatures.tsx, 91, 9))

            p?: boolean;
>p : Symbol(P2.p, Decl(callsOnComplexSignatures.tsx, 92, 22))

            c?: any;
>c : Symbol(P2.c, Decl(callsOnComplexSignatures.tsx, 93, 24))

            d?: any;
>d : Symbol(P2.d, Decl(callsOnComplexSignatures.tsx, 94, 20))
        }

        var C: React.ComponentType<P1> | React.ComponentType<P2> = null as any;
>C : Symbol(C, Decl(callsOnComplexSignatures.tsx, 98, 11))
>React : Symbol(React, Decl(callsOnComplexSignatures.tsx, 1, 6))
>ComponentType : Symbol(React.ComponentType, Decl(react16.d.ts, 117, 60))
>P1 : Symbol(P1, Decl(callsOnComplexSignatures.tsx, 87, 24))
>React : Symbol(React, Decl(callsOnComplexSignatures.tsx, 1, 6))
>ComponentType : Symbol(React.ComponentType, Decl(react16.d.ts, 117, 60))
>P2 : Symbol(P2, Decl(callsOnComplexSignatures.tsx, 91, 9))

        const a = <C p={true} />;
>a : Symbol(a, Decl(callsOnComplexSignatures.tsx, 100, 13))
>C : Symbol(C, Decl(callsOnComplexSignatures.tsx, 98, 11))
>p : Symbol(p, Decl(callsOnComplexSignatures.tsx, 100, 20))
    }
}

