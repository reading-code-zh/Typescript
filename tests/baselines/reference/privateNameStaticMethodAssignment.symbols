=== tests/cases/conformance/classes/members/privateNames/privateNameStaticMethodAssignment.ts ===
class A3 {
>A3 : Symbol(A3, Decl(privateNameStaticMethodAssignment.ts, 0, 0))

    static #method() { };
>#method : Symbol(A3.#method, Decl(privateNameStaticMethodAssignment.ts, 0, 10))

    constructor(a: typeof A3, b: any) {
>a : Symbol(a, Decl(privateNameStaticMethodAssignment.ts, 2, 16))
>A3 : Symbol(A3, Decl(privateNameStaticMethodAssignment.ts, 0, 0))
>b : Symbol(b, Decl(privateNameStaticMethodAssignment.ts, 2, 29))

        A3.#method = () => {} // Error, not writable 
>A3.#method : Symbol(A3.#method, Decl(privateNameStaticMethodAssignment.ts, 0, 10))
>A3 : Symbol(A3, Decl(privateNameStaticMethodAssignment.ts, 0, 0))

        a.#method = () => { }; // Error, not writable 
>a.#method : Symbol(A3.#method, Decl(privateNameStaticMethodAssignment.ts, 0, 10))
>a : Symbol(a, Decl(privateNameStaticMethodAssignment.ts, 2, 16))

        b.#method =  () => { } //Error, not writable 
>b : Symbol(b, Decl(privateNameStaticMethodAssignment.ts, 2, 29))

        ({ x: A3.#method } = { x: () => {}}); //Error, not writable 
>x : Symbol(x, Decl(privateNameStaticMethodAssignment.ts, 6, 10))
>A3.#method : Symbol(A3.#method, Decl(privateNameStaticMethodAssignment.ts, 0, 10))
>A3 : Symbol(A3, Decl(privateNameStaticMethodAssignment.ts, 0, 0))
>x : Symbol(x, Decl(privateNameStaticMethodAssignment.ts, 6, 30))

        let x = A3.#method;
>x : Symbol(x, Decl(privateNameStaticMethodAssignment.ts, 7, 11))
>A3.#method : Symbol(A3.#method, Decl(privateNameStaticMethodAssignment.ts, 0, 10))
>A3 : Symbol(A3, Decl(privateNameStaticMethodAssignment.ts, 0, 0))

        b.#method++ //Error, not writable 
>b : Symbol(b, Decl(privateNameStaticMethodAssignment.ts, 2, 29))
    }
}

