=== tests/cases/compiler/unparenthesizedFunctionTypeInUnionOrIntersection.ts ===
type U1 = string | () => void;
>U1 : string | (() => void)

type U2 = string | (foo: number) => void
>U2 : string | ((foo: number) => void)
>foo : number

type U3 = | () => number
>U3 : () => number

type U4 = | (foo?: number) => void;
>U4 : (foo?: number) => void
>foo : number

type U5 = string | (number: number, foo?: string) => void | number;
>U5 : string | ((number: number, foo?: string) => void | number)
>number : number
>foo : string

type U6 =
>U6 : string | ((...args: any[]) => void | number)

  | string
  | (...args: any[]) => void
>args : any[]

  | number;

type I1 = string & () => void;
>I1 : string & (() => void)

type I2 = string & (...foo: number[]) => void;
>I2 : string & ((...foo: number[]) => void)
>foo : number[]

type I3 = & () => boolean
>I3 : () => boolean

type I4 = & () => boolean & null;
>I4 : () => boolean & null
>null : null

type I5 = string & (any: any, any2: any) => any & any;
>I5 : string & ((any: any, any2: any) => any & any)
>any : any
>any2 : any

type I6 =
>I6 : string & ((foo: any) => void)

  & string
  & (foo: any) => void;
>foo : any

type M1 = string | number & string | () => number;
>M1 : string | (() => number)

type M2 = any & string | any & () => void;
>M2 : any

type M3 = any & (foo: any) => void | () => void & any;
>M3 : any
>foo : any

type OK1 = string | (number);
>OK1 : string | number

type OK2 = string | ((number));
>OK2 : string | number

type OK3 = string | (()=> void);
>OK3 : string | (() => void)

type OK4 = string | (()=> string | number);
>OK4 : string | (() => string | number)

