=== /a.ts ===
class A { a!: string }
>A : Symbol(A, Decl(a.ts, 0, 0))
>a : Symbol(A.a, Decl(a.ts, 0, 9))

export type { A as default };
>A : Symbol(A, Decl(a.ts, 0, 0))
>default : Symbol(default, Decl(a.ts, 1, 13))

=== /b.ts ===
import A from './a';
>A : Symbol(A, Decl(b.ts, 0, 6))

import type { default as B } from './a';
>default : Symbol(default, Decl(a.ts, 1, 13))
>B : Symbol(B, Decl(b.ts, 1, 13))

export { A, B };
>A : Symbol(A, Decl(b.ts, 2, 8))
>B : Symbol(B, Decl(b.ts, 2, 11))

=== /c.ts ===
import * as types from './b';
>types : Symbol(types, Decl(c.ts, 0, 6))

export { types as default };
>types : Symbol(types, Decl(c.ts, 0, 6))
>default : Symbol(default, Decl(c.ts, 1, 8))

=== /d.ts ===
import types from './c';
>types : Symbol(types, Decl(d.ts, 0, 6))

new types.A();
>types : Symbol(types, Decl(d.ts, 0, 6))

new types.B();
>types : Symbol(types, Decl(d.ts, 0, 6))

const a: types.A = {};
>a : Symbol(a, Decl(d.ts, 3, 5))
>types : Symbol(types, Decl(d.ts, 0, 6))
>A : Symbol(types.A, Decl(b.ts, 2, 8))

const b: types.B = {};
>b : Symbol(b, Decl(d.ts, 4, 5))
>types : Symbol(types, Decl(d.ts, 0, 6))
>B : Symbol(types.B, Decl(b.ts, 2, 11))

