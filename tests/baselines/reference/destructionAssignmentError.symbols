=== tests/cases/compiler/destructionAssignmentError.ts ===
declare function fn(): { a: 1, b: 2 }
>fn : Symbol(fn, Decl(destructionAssignmentError.ts, 0, 0))
>a : Symbol(a, Decl(destructionAssignmentError.ts, 0, 24))
>b : Symbol(b, Decl(destructionAssignmentError.ts, 0, 30))

let a: number;
>a : Symbol(a, Decl(destructionAssignmentError.ts, 1, 3))

let b: number;
>b : Symbol(b, Decl(destructionAssignmentError.ts, 2, 3))

({ a, b } = fn());
>a : Symbol(a, Decl(destructionAssignmentError.ts, 4, 2))
>b : Symbol(b, Decl(destructionAssignmentError.ts, 4, 5))
>fn : Symbol(fn, Decl(destructionAssignmentError.ts, 0, 0))

{ a, b } = fn();
>a : Symbol(a, Decl(destructionAssignmentError.ts, 1, 3))
>b : Symbol(b, Decl(destructionAssignmentError.ts, 2, 3))
>fn : Symbol(fn, Decl(destructionAssignmentError.ts, 0, 0))

({ a, b } =
>a : Symbol(a, Decl(destructionAssignmentError.ts, 7, 2))
>b : Symbol(b, Decl(destructionAssignmentError.ts, 7, 5))

fn());
>fn : Symbol(fn, Decl(destructionAssignmentError.ts, 0, 0))

{ a, b }
>a : Symbol(a, Decl(destructionAssignmentError.ts, 1, 3))
>b : Symbol(b, Decl(destructionAssignmentError.ts, 2, 3))

= fn();
>fn : Symbol(fn, Decl(destructionAssignmentError.ts, 0, 0))

