=== tests/cases/conformance/classes/members/privateNames/privateNameNestedClassAccessorsShadowing.ts ===
class Base {
>Base : Symbol(Base, Decl(privateNameNestedClassAccessorsShadowing.ts, 0, 0))

    get #x() { return 1; };
>#x : Symbol(Base.#x, Decl(privateNameNestedClassAccessorsShadowing.ts, 0, 12))

    constructor() {
        class Derived {
>Derived : Symbol(Derived, Decl(privateNameNestedClassAccessorsShadowing.ts, 2, 19))

            get #x() { return 1; };
>#x : Symbol(Derived.#x, Decl(privateNameNestedClassAccessorsShadowing.ts, 3, 23))

            testBase(x: Base) {
>testBase : Symbol(Derived.testBase, Decl(privateNameNestedClassAccessorsShadowing.ts, 4, 35))
>x : Symbol(x, Decl(privateNameNestedClassAccessorsShadowing.ts, 5, 21))
>Base : Symbol(Base, Decl(privateNameNestedClassAccessorsShadowing.ts, 0, 0))

                console.log(x.#x);
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>x : Symbol(x, Decl(privateNameNestedClassAccessorsShadowing.ts, 5, 21))
            }
            testDerived(x: Derived) {
>testDerived : Symbol(Derived.testDerived, Decl(privateNameNestedClassAccessorsShadowing.ts, 7, 13))
>x : Symbol(x, Decl(privateNameNestedClassAccessorsShadowing.ts, 8, 24))
>Derived : Symbol(Derived, Decl(privateNameNestedClassAccessorsShadowing.ts, 2, 19))

                console.log(x.#x);
>console.log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>console : Symbol(console, Decl(lib.dom.d.ts, --, --))
>log : Symbol(Console.log, Decl(lib.dom.d.ts, --, --))
>x.#x : Symbol(Derived.#x, Decl(privateNameNestedClassAccessorsShadowing.ts, 3, 23))
>x : Symbol(x, Decl(privateNameNestedClassAccessorsShadowing.ts, 8, 24))
            }
        }
    }
}

