=== tests/cases/compiler/dom.ts ===
export type DOMNode = Node;
>DOMNode : Symbol(DOMNode, Decl(dom.ts, 0, 0))
>Node : Symbol(Node, Decl(lib.dom.d.ts, --, --), Decl(lib.dom.d.ts, --, --))

=== tests/cases/compiler/custom.ts ===
export type Node = {};
>Node : Symbol(Node, Decl(custom.ts, 0, 0))

=== tests/cases/compiler/index.ts ===
import { Node } from './custom'
>Node : Symbol(Node, Decl(index.ts, 0, 8))

import { DOMNode } from './dom'
>DOMNode : Symbol(DOMNode, Decl(index.ts, 1, 8))

type Constructor = new (...args: any[]) => any
>Constructor : Symbol(Constructor, Decl(index.ts, 1, 31))
>args : Symbol(args, Decl(index.ts, 3, 24))

export const mixin = (Base: Constructor) => {
>mixin : Symbol(mixin, Decl(index.ts, 5, 12))
>Base : Symbol(Base, Decl(index.ts, 5, 22))
>Constructor : Symbol(Constructor, Decl(index.ts, 1, 31))

  return class extends Base {
>Base : Symbol(Base, Decl(index.ts, 5, 22))

    get(domNode: DOMNode) {}
>get : Symbol((Anonymous class).get, Decl(index.ts, 6, 29))
>domNode : Symbol(domNode, Decl(index.ts, 7, 8))
>DOMNode : Symbol(DOMNode, Decl(index.ts, 1, 8))
  }
}
