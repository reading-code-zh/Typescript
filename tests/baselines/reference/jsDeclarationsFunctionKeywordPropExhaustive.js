//// [source.js]
function foo() {}
// properties
foo.x = 1;
foo.y = 1;

// keywords
foo.break = 1;
foo.case = 1;
foo.catch = 1;
foo.class = 1;
foo.const = 1;
foo.continue = 1;
foo.debugger = 1;
foo.default = 1;
foo.delete = 1;
foo.do = 1;
foo.else = 1;
foo.enum = 1;
foo.export = 1;
foo.extends = 1;
foo.false = 1;
foo.finally = 1;
foo.for = 1;
foo.function = 1;
foo.if = 1;
foo.import = 1;
foo.in = 1;
foo.instanceof = 1;
foo.new = 1;
foo.null = 1;
foo.return = 1;
foo.super = 1;
foo.switch = 1;
foo.this = 1;
foo.throw = 1;
foo.true = 1;
foo.try = 1;
foo.typeof = 1;
foo.var = 1;
foo.void = 1;
foo.while = 1;
foo.with = 1;
foo.implements = 1;
foo.interface = 1;
foo.let = 1;
foo.package = 1;
foo.private = 1;
foo.protected = 1;
foo.public = 1;
foo.static = 1;
foo.yield = 1;
foo.abstract = 1;
foo.as = 1;
foo.asserts = 1;
foo.any = 1;
foo.async = 1;
foo.await = 1;
foo.boolean = 1;
foo.constructor = 1;
foo.declare = 1;
foo.get = 1;
foo.infer = 1;
foo.is = 1;
foo.keyof = 1;
foo.module = 1;
foo.namespace = 1;
foo.never = 1;
foo.readonly = 1;
foo.require = 1;
foo.number = 1;
foo.object = 1;
foo.set = 1;
foo.string = 1;
foo.symbol = 1;
foo.type = 1;
foo.undefined = 1;
foo.unique = 1;
foo.unknown = 1;
foo.from = 1;
foo.global = 1;
foo.bigint = 1;
foo.of = 1;

//// [source.js]
function foo() { }
// properties
foo.x = 1;
foo.y = 1;
// keywords
foo.break = 1;
foo.case = 1;
foo.catch = 1;
foo.class = 1;
foo.const = 1;
foo.continue = 1;
foo.debugger = 1;
foo.default = 1;
foo.delete = 1;
foo.do = 1;
foo.else = 1;
foo.enum = 1;
foo.export = 1;
foo.extends = 1;
foo.false = 1;
foo.finally = 1;
foo.for = 1;
foo.function = 1;
foo.if = 1;
foo.import = 1;
foo.in = 1;
foo.instanceof = 1;
foo.new = 1;
foo.null = 1;
foo.return = 1;
foo.super = 1;
foo.switch = 1;
foo.this = 1;
foo.throw = 1;
foo.true = 1;
foo.try = 1;
foo.typeof = 1;
foo.var = 1;
foo.void = 1;
foo.while = 1;
foo.with = 1;
foo.implements = 1;
foo.interface = 1;
foo.let = 1;
foo.package = 1;
foo.private = 1;
foo.protected = 1;
foo.public = 1;
foo.static = 1;
foo.yield = 1;
foo.abstract = 1;
foo.as = 1;
foo.asserts = 1;
foo.any = 1;
foo.async = 1;
foo.await = 1;
foo.boolean = 1;
foo.constructor = 1;
foo.declare = 1;
foo.get = 1;
foo.infer = 1;
foo.is = 1;
foo.keyof = 1;
foo.module = 1;
foo.namespace = 1;
foo.never = 1;
foo.readonly = 1;
foo.require = 1;
foo.number = 1;
foo.object = 1;
foo.set = 1;
foo.string = 1;
foo.symbol = 1;
foo.type = 1;
foo.undefined = 1;
foo.unique = 1;
foo.unknown = 1;
foo.from = 1;
foo.global = 1;
foo.bigint = 1;
foo.of = 1;


//// [source.d.ts]
declare function foo(): void;
declare namespace foo {
    export const x: number;
    export const y: number;
    const _break: number;
    export { _break as break };
    const _case: number;
    export { _case as case };
    const _catch: number;
    export { _catch as catch };
    const _class: number;
    export { _class as class };
    const _const: number;
    export { _const as const };
    const _continue: number;
    export { _continue as continue };
    const _debugger: number;
    export { _debugger as debugger };
    const _default: number;
    export { _default as default };
    const _delete: number;
    export { _delete as delete };
    const _do: number;
    export { _do as do };
    const _else: number;
    export { _else as else };
    const _enum: number;
    export { _enum as enum };
    const _export: number;
    export { _export as export };
    const _extends: number;
    export { _extends as extends };
    const _false: number;
    export { _false as false };
    const _finally: number;
    export { _finally as finally };
    const _for: number;
    export { _for as for };
    const _function: number;
    export { _function as function };
    const _if: number;
    export { _if as if };
    const _import: number;
    export { _import as import };
    const _in: number;
    export { _in as in };
    const _instanceof: number;
    export { _instanceof as instanceof };
    const _new: number;
    export { _new as new };
    const _null: number;
    export { _null as null };
    const _return: number;
    export { _return as return };
    const _super: number;
    export { _super as super };
    const _switch: number;
    export { _switch as switch };
    const _this: number;
    export { _this as this };
    const _throw: number;
    export { _throw as throw };
    const _true: number;
    export { _true as true };
    const _try: number;
    export { _try as try };
    const _typeof: number;
    export { _typeof as typeof };
    const _var: number;
    export { _var as var };
    const _void: number;
    export { _void as void };
    const _while: number;
    export { _while as while };
    const _with: number;
    export { _with as with };
    const _implements: number;
    export { _implements as implements };
    const _interface: number;
    export { _interface as interface };
    const _let: number;
    export { _let as let };
    const _package: number;
    export { _package as package };
    const _private: number;
    export { _private as private };
    const _protected: number;
    export { _protected as protected };
    const _public: number;
    export { _public as public };
    const _static: number;
    export { _static as static };
    const _yield: number;
    export { _yield as yield };
    export const abstract: number;
    export const as: number;
    export const asserts: number;
    export const any: number;
    export const async: number;
    export const await: number;
    export const boolean: number;
    export const constructor: number;
    export const declare: number;
    export const get: number;
    export const infer: number;
    export const is: number;
    export const keyof: number;
    export const module: number;
    export const namespace: number;
    export const never: number;
    export const readonly: number;
    export const require: number;
    export const number: number;
    export const object: number;
    export const set: number;
    export const string: number;
    export const symbol: number;
    export const type: number;
    export const undefined: number;
    export const unique: number;
    export const unknown: number;
    export const from: number;
    export const global: number;
    export const bigint: number;
    export const of: number;
}
