=== tests/cases/compiler/index.ts ===
class Test extends Array1 {
>Test : Symbol(Test, Decl(index.ts, 0, 0))
>Array1 : Symbol(Array1, Decl(other.ts, 0, 0), Decl(other.ts, 9, 11), Decl(other.ts, 9, 38), Decl(other.ts, 14, 1))

  [key: symbol]: string
>key : Symbol(key, Decl(index.ts, 1, 3))
}

=== tests/cases/compiler/other.ts ===
interface Array1<T> {
>Array1 : Symbol(Array1, Decl(other.ts, 0, 0), Decl(other.ts, 9, 11), Decl(other.ts, 9, 38), Decl(other.ts, 14, 1))
>T : Symbol(T, Decl(other.ts, 0, 17), Decl(other.ts, 12, 17), Decl(other.ts, 17, 17))

  length: number;
>length : Symbol(Array1.length, Decl(other.ts, 0, 21))

  [n: number]: T;
>n : Symbol(n, Decl(other.ts, 2, 3))
>T : Symbol(T, Decl(other.ts, 0, 17), Decl(other.ts, 12, 17), Decl(other.ts, 17, 17))
}

interface ArrayConstructor1 {
>ArrayConstructor1 : Symbol(ArrayConstructor1, Decl(other.ts, 3, 1))

  new(arrayLength?: number): Array1<any>;
>arrayLength : Symbol(arrayLength, Decl(other.ts, 6, 6))
>Array1 : Symbol(Array1, Decl(other.ts, 0, 0), Decl(other.ts, 9, 11), Decl(other.ts, 9, 38), Decl(other.ts, 14, 1))
}

declare var Array1: ArrayConstructor1;
>Array1 : Symbol(Array1, Decl(other.ts, 0, 0), Decl(other.ts, 9, 11), Decl(other.ts, 9, 38), Decl(other.ts, 14, 1))
>ArrayConstructor1 : Symbol(ArrayConstructor1, Decl(other.ts, 3, 1))

// iterable.d.ts
interface Array1<T> {
>Array1 : Symbol(Array1, Decl(other.ts, 0, 0), Decl(other.ts, 9, 11), Decl(other.ts, 9, 38), Decl(other.ts, 14, 1))
>T : Symbol(T, Decl(other.ts, 0, 17), Decl(other.ts, 12, 17), Decl(other.ts, 17, 17))

  [Symbol.iterator](): IterableIterator<T>;
>[Symbol.iterator] : Symbol(Array1[Symbol.iterator], Decl(other.ts, 12, 21))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>IterableIterator : Symbol(IterableIterator, Decl(lib.es2015.iterable.d.ts, --, --))
>T : Symbol(T, Decl(other.ts, 0, 17), Decl(other.ts, 12, 17), Decl(other.ts, 17, 17))
}

// symbol.wellknown.d.ts
interface Array1<T> {
>Array1 : Symbol(Array1, Decl(other.ts, 0, 0), Decl(other.ts, 9, 11), Decl(other.ts, 9, 38), Decl(other.ts, 14, 1))
>T : Symbol(T, Decl(other.ts, 0, 17), Decl(other.ts, 12, 17), Decl(other.ts, 17, 17))

  /**
   * Returns an object whose properties have the value 'true'
   * when they will be absent when used in a 'with' statement.
   */
  [Symbol.unscopables](): {
>[Symbol.unscopables] : Symbol(Array1[Symbol.unscopables], Decl(other.ts, 17, 21))
>Symbol.unscopables : Symbol(SymbolConstructor.unscopables, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>unscopables : Symbol(SymbolConstructor.unscopables, Decl(lib.es2015.symbol.wellknown.d.ts, --, --))

      copyWithin: boolean;
>copyWithin : Symbol(copyWithin, Decl(other.ts, 22, 27))

      entries: boolean;
>entries : Symbol(entries, Decl(other.ts, 23, 26))

      fill: boolean;
>fill : Symbol(fill, Decl(other.ts, 24, 23))

      find: boolean;
>find : Symbol(find, Decl(other.ts, 25, 20))

      findIndex: boolean;
>findIndex : Symbol(findIndex, Decl(other.ts, 26, 20))

      keys: boolean;
>keys : Symbol(keys, Decl(other.ts, 27, 25))

      values: boolean;
>values : Symbol(values, Decl(other.ts, 28, 20))

  };
}

