=== tests/cases/compiler/restTypeRetainsMappyness.ts ===
type Foo<T extends any[]> = {
>Foo : Symbol(Foo, Decl(restTypeRetainsMappyness.ts, 0, 0))
>T : Symbol(T, Decl(restTypeRetainsMappyness.ts, 0, 9))

    [P in keyof T]: T[P]
>P : Symbol(P, Decl(restTypeRetainsMappyness.ts, 1, 5))
>T : Symbol(T, Decl(restTypeRetainsMappyness.ts, 0, 9))
>T : Symbol(T, Decl(restTypeRetainsMappyness.ts, 0, 9))
>P : Symbol(P, Decl(restTypeRetainsMappyness.ts, 1, 5))
}

function test<T extends any[]>(fn: (...args: Foo<T>) => void) {
>test : Symbol(test, Decl(restTypeRetainsMappyness.ts, 2, 1))
>T : Symbol(T, Decl(restTypeRetainsMappyness.ts, 4, 14))
>fn : Symbol(fn, Decl(restTypeRetainsMappyness.ts, 4, 31))
>args : Symbol(args, Decl(restTypeRetainsMappyness.ts, 4, 36))
>Foo : Symbol(Foo, Decl(restTypeRetainsMappyness.ts, 0, 0))
>T : Symbol(T, Decl(restTypeRetainsMappyness.ts, 4, 14))

    const arr: Foo<T> = {} as any
>arr : Symbol(arr, Decl(restTypeRetainsMappyness.ts, 5, 9))
>Foo : Symbol(Foo, Decl(restTypeRetainsMappyness.ts, 0, 0))
>T : Symbol(T, Decl(restTypeRetainsMappyness.ts, 4, 14))

    fn(...arr) // Error: Argument of type 'any[]' is not assignable to parameter of type 'Foo<T>'
>fn : Symbol(fn, Decl(restTypeRetainsMappyness.ts, 4, 31))
>arr : Symbol(arr, Decl(restTypeRetainsMappyness.ts, 5, 9))
}

