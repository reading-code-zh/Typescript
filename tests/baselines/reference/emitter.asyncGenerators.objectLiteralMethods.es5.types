=== tests/cases/conformance/emitter/es5/asyncGenerators/O1.ts ===
const o1 = {
>o1 : { f(): AsyncGenerator<never, void, unknown>; }
>{    async * f() {    }} : { f(): AsyncGenerator<never, void, unknown>; }

    async * f() {
>f : () => AsyncGenerator<never, void, unknown>
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/O2.ts ===
const o2 = {
>o2 : { f(): AsyncGenerator<any, void, unknown>; }
>{    async * f() {        const x = yield;    }} : { f(): AsyncGenerator<any, void, unknown>; }

    async * f() {
>f : () => AsyncGenerator<any, void, unknown>

        const x = yield;
>x : any
>yield : any
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/O3.ts ===
const o3 = {
>o3 : { f(): AsyncGenerator<number, void, unknown>; }
>{    async * f() {        const x = yield 1;    }} : { f(): AsyncGenerator<number, void, unknown>; }

    async * f() {
>f : () => AsyncGenerator<number, void, unknown>

        const x = yield 1;
>x : any
>yield 1 : any
>1 : 1
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/O4.ts ===
const o4 = {
>o4 : { f(): AsyncGenerator<number, void, undefined>; }
>{    async * f() {        const x = yield* [1];    }} : { f(): AsyncGenerator<number, void, undefined>; }

    async * f() {
>f : () => AsyncGenerator<number, void, undefined>

        const x = yield* [1];
>x : any
>yield* [1] : any
>[1] : number[]
>1 : 1
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/O5.ts ===
const o5 = {
>o5 : { f(): AsyncGenerator<number, void, unknown>; }
>{    async * f() {        const x = yield* (async function*() { yield 1; })();    }} : { f(): AsyncGenerator<number, void, unknown>; }

    async * f() {
>f : () => AsyncGenerator<number, void, unknown>

        const x = yield* (async function*() { yield 1; })();
>x : void
>yield* (async function*() { yield 1; })() : void
>(async function*() { yield 1; })() : AsyncGenerator<number, void, unknown>
>(async function*() { yield 1; }) : () => AsyncGenerator<number, void, unknown>
>async function*() { yield 1; } : () => AsyncGenerator<number, void, unknown>
>yield 1 : any
>1 : 1
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/O6.ts ===
const o6 = {
>o6 : { f(): AsyncGenerator<never, void, unknown>; }
>{    async * f() {        const x = await 1;    }} : { f(): AsyncGenerator<never, void, unknown>; }

    async * f() {
>f : () => AsyncGenerator<never, void, unknown>

        const x = await 1;
>x : 1
>await 1 : 1
>1 : 1
    }
}
=== tests/cases/conformance/emitter/es5/asyncGenerators/O7.ts ===
const o7 = {
>o7 : { f(): AsyncGenerator<never, number, unknown>; }
>{    async * f() {        return 1;    }} : { f(): AsyncGenerator<never, number, unknown>; }

    async * f() {
>f : () => AsyncGenerator<never, number, unknown>

        return 1;
>1 : 1
    }
}

