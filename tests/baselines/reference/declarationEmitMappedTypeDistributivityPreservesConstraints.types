=== tests/cases/compiler/types.ts ===
type Fns = Record<string, (...params: unknown[]) => unknown>
>Fns : { [x: string]: (...params: unknown[]) => unknown; }
>params : unknown[]

type Map<T extends Fns> = { [K in keyof T]: T[K]; };
>Map : Map<T>

type AllArg<T extends Fns> = { [K in keyof T]: Parameters<T[K]> };
>AllArg : AllArg<T>

function fn<T extends { x: Map<T['x']> }>(sliceIndex: T): AllArg<T['x']> {
>fn : <T extends { x: Map<T['x']>; }>(sliceIndex: T) => AllArg<T['x']>
>x : Map<T["x"]>
>sliceIndex : T

    return null!;
>null! : null
>null : null
}

export default { fn };
>{ fn } : { fn: <T extends { x: Map<T["x"]>; }>(sliceIndex: T) => AllArg<T["x"]>; }
>fn : <T extends { x: Map<T["x"]>; }>(sliceIndex: T) => AllArg<T["x"]>

=== tests/cases/compiler/reexport.ts ===
import test from "./types";
>test : { fn: <T extends { x: { [K in keyof T["x"]]: T["x"][K]; }; }>(sliceIndex: T) => { [K in keyof T["x"]]: Parameters<T["x"][K]>; }; }

export default { test };
>{ test } : { test: { fn: <T extends { x: { [K in keyof T["x"]]: T["x"][K]; }; }>(sliceIndex: T) => { [K in keyof T["x"]]: Parameters<T["x"][K]>; }; }; }
>test : { fn: <T extends { x: { [K in keyof T["x"]]: T["x"][K]; }; }>(sliceIndex: T) => { [K in keyof T["x"]]: Parameters<T["x"][K]>; }; }

