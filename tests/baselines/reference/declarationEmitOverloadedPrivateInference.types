=== tests/cases/compiler/declarationEmitOverloadedPrivateInference.ts ===
function noArgs(): string {
>noArgs : () => string

    return null as any;
>null as any : any
>null : null
}

function oneArg(input: string): string {
>oneArg : (input: string) => string
>input : string

    return null as any;
>null as any : any
>null : null
}

export class Wrapper {
>Wrapper : Wrapper

    private proxy<T, U>(fn: (options: T) => U): (options: T) => U;
>proxy : { <T, U>(fn: (options: T) => U): (options: T) => U; <T, U>(fn: (options?: T) => U, noArgs: true): (options?: T) => U; }
>fn : (options: T) => U
>options : T
>options : T

    private proxy<T, U>(fn: (options?: T) => U, noArgs: true): (options?: T) => U;
>proxy : { <T, U>(fn: (options: T) => U): (options: T) => U; <T, U>(fn: (options?: T) => U, noArgs: true): (options?: T) => U; }
>fn : (options?: T) => U
>options : T
>noArgs : true
>true : true
>options : T

    private proxy<T, U>(fn: (options: T) => U) {
>proxy : { <T, U>(fn: (options: T) => U): (options: T) => U; <T, U>(fn: (options?: T) => U, noArgs: true): (options?: T) => U; }
>fn : (options: T) => U
>options : T

        return null as any;
>null as any : any
>null : null
    }

    public Proxies = {
>Proxies : { Failure: (options?: unknown) => string; Success: (options: string) => string; }
>{        Failure: this.proxy(noArgs, true),        Success: this.proxy(oneArg),    } : { Failure: (options?: unknown) => string; Success: (options: string) => string; }

        Failure: this.proxy(noArgs, true),
>Failure : (options?: unknown) => string
>this.proxy(noArgs, true) : (options?: unknown) => string
>this.proxy : { <T, U>(fn: (options: T) => U): (options: T) => U; <T, U>(fn: (options?: T) => U, noArgs: true): (options?: T) => U; }
>this : this
>proxy : { <T, U>(fn: (options: T) => U): (options: T) => U; <T, U>(fn: (options?: T) => U, noArgs: true): (options?: T) => U; }
>noArgs : () => string
>true : true

        Success: this.proxy(oneArg),
>Success : (options: string) => string
>this.proxy(oneArg) : (options: string) => string
>this.proxy : { <T, U>(fn: (options: T) => U): (options: T) => U; <T, U>(fn: (options?: T) => U, noArgs: true): (options?: T) => U; }
>this : this
>proxy : { <T, U>(fn: (options: T) => U): (options: T) => U; <T, U>(fn: (options?: T) => U, noArgs: true): (options?: T) => U; }
>oneArg : (input: string) => string

    };
}
