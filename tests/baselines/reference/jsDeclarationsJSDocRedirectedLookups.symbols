=== tests/cases/conformance/jsdoc/declarations/index.js ===
// these are recognized as TS concepts by the checker
/** @type {String} */const a = "";
>a : Symbol(a, Decl(index.js, 1, 26))

/** @type {Number} */const b = 0;
>b : Symbol(b, Decl(index.js, 2, 26))

/** @type {Boolean} */const c = true;
>c : Symbol(c, Decl(index.js, 3, 27))

/** @type {Void} */const d = undefined;
>d : Symbol(d, Decl(index.js, 4, 24))
>undefined : Symbol(undefined)

/** @type {Undefined} */const e = undefined;
>e : Symbol(e, Decl(index.js, 5, 29))
>undefined : Symbol(undefined)

/** @type {Null} */const f = null;
>f : Symbol(f, Decl(index.js, 6, 24))

/** @type {Function} */const g = () => void 0;
>g : Symbol(g, Decl(index.js, 8, 28))

/** @type {function} */const h = () => void 0;
>h : Symbol(h, Decl(index.js, 9, 28))

/** @type {array} */const i = [];
>i : Symbol(i, Decl(index.js, 10, 25))

/** @type {promise} */const j = Promise.resolve(0);
>j : Symbol(j, Decl(index.js, 11, 27))
>Promise.resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>Promise : Symbol(Promise, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>resolve : Symbol(PromiseConstructor.resolve, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))

/** @type {Object<string, string>} */const k = {x: "x"};
>k : Symbol(k, Decl(index.js, 12, 42))
>x : Symbol(x, Decl(index.js, 12, 48))


// these are not recognized as anything and should just be lookup failures
// ignore the errors to try to ensure they're emitted as `any` in declaration emit
// @ts-ignore
/** @type {class} */const l = true;
>l : Symbol(l, Decl(index.js, 18, 25))

// @ts-ignore
/** @type {bool} */const m = true;
>m : Symbol(m, Decl(index.js, 20, 24))

// @ts-ignore
/** @type {int} */const n = true;
>n : Symbol(n, Decl(index.js, 22, 23))

// @ts-ignore
/** @type {float} */const o = true;
>o : Symbol(o, Decl(index.js, 24, 25))

// @ts-ignore
/** @type {integer} */const p = true;
>p : Symbol(p, Decl(index.js, 26, 27))

// or, in the case of `event` likely erroneously refers to the type of the global Event object
/** @type {event} */const q = undefined;
>q : Symbol(q, Decl(index.js, 29, 25))
>undefined : Symbol(undefined)

