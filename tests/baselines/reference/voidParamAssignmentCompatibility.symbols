=== tests/cases/conformance/expressions/functions/voidParamAssignmentCompatibility.ts ===
declare function g(a: void): void;
>g : Symbol(g, Decl(voidParamAssignmentCompatibility.ts, 0, 0))
>a : Symbol(a, Decl(voidParamAssignmentCompatibility.ts, 0, 19))

let gg: () => void = g;
>gg : Symbol(gg, Decl(voidParamAssignmentCompatibility.ts, 1, 3))
>g : Symbol(g, Decl(voidParamAssignmentCompatibility.ts, 0, 0))

interface Obj<T> {
>Obj : Symbol(Obj, Decl(voidParamAssignmentCompatibility.ts, 1, 23))
>T : Symbol(T, Decl(voidParamAssignmentCompatibility.ts, 3, 14))

    method(value: T): void;
>method : Symbol(Obj.method, Decl(voidParamAssignmentCompatibility.ts, 3, 18))
>value : Symbol(value, Decl(voidParamAssignmentCompatibility.ts, 4, 11))
>T : Symbol(T, Decl(voidParamAssignmentCompatibility.ts, 3, 14))
}

declare const o: Obj<void>;
>o : Symbol(o, Decl(voidParamAssignmentCompatibility.ts, 7, 13))
>Obj : Symbol(Obj, Decl(voidParamAssignmentCompatibility.ts, 1, 23))

gg = o.method;
>gg : Symbol(gg, Decl(voidParamAssignmentCompatibility.ts, 1, 3))
>o.method : Symbol(Obj.method, Decl(voidParamAssignmentCompatibility.ts, 3, 18))
>o : Symbol(o, Decl(voidParamAssignmentCompatibility.ts, 7, 13))
>method : Symbol(Obj.method, Decl(voidParamAssignmentCompatibility.ts, 3, 18))

