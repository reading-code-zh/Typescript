=== tests/cases/compiler/exhaustiveSwitchCheckCircularity.ts ===
// Repro from #47539

declare function isNever(n: never): boolean;
>isNever : Symbol(isNever, Decl(exhaustiveSwitchCheckCircularity.ts, 0, 0))
>n : Symbol(n, Decl(exhaustiveSwitchCheckCircularity.ts, 2, 25))

function f() {
>f : Symbol(f, Decl(exhaustiveSwitchCheckCircularity.ts, 2, 44))

    let foo: "aaa" | "bbb" = "aaa";
>foo : Symbol(foo, Decl(exhaustiveSwitchCheckCircularity.ts, 5, 7))

    while (true) {
        switch (foo) {
>foo : Symbol(foo, Decl(exhaustiveSwitchCheckCircularity.ts, 5, 7))

            case "aaa":
        }
        if (foo === "aaa") {
>foo : Symbol(foo, Decl(exhaustiveSwitchCheckCircularity.ts, 5, 7))

            foo = "bbb";
>foo : Symbol(foo, Decl(exhaustiveSwitchCheckCircularity.ts, 5, 7))
        }
        else if (isNever(foo)) {  // Error expected
>isNever : Symbol(isNever, Decl(exhaustiveSwitchCheckCircularity.ts, 0, 0))
>foo : Symbol(foo, Decl(exhaustiveSwitchCheckCircularity.ts, 5, 7))

            break;
        }
    }
}

